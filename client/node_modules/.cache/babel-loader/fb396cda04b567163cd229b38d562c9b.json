{"ast":null,"code":"import Element from './element';\nimport traversable from '../mixins/traversable';\nimport { append } from '../util';\nimport elementsBoundingBox from './utils/elements-bounding-box';\nimport elementsClippedBoundingBox from './utils/elements-clippend-bounding-box';\nvar Group = function (superclass) {\n  function Group(options) {\n    superclass.call(this, options);\n    this.children = [];\n  }\n  if (superclass) Group.__proto__ = superclass;\n  Group.prototype = Object.create(superclass && superclass.prototype);\n  Group.prototype.constructor = Group;\n  var prototypeAccessors = {\n    nodeType: {\n      configurable: true\n    }\n  };\n  prototypeAccessors.nodeType.get = function () {\n    return \"Group\";\n  };\n  Group.prototype.childrenChange = function childrenChange(action, items, index) {\n    this.trigger(\"childrenChange\", {\n      action: action,\n      items: items,\n      index: index\n    });\n  };\n  Group.prototype.append = function append$1() {\n    append(this.children, arguments);\n    this._reparent(arguments, this);\n    this.childrenChange(\"add\", arguments);\n    return this;\n  };\n  Group.prototype.insert = function insert(index, element) {\n    this.children.splice(index, 0, element);\n    element.parent = this;\n    this.childrenChange(\"add\", [element], index);\n    return this;\n  };\n  Group.prototype.insertAt = function insertAt(element, index) {\n    return this.insert(index, element);\n  };\n  Group.prototype.remove = function remove(element) {\n    var index = this.children.indexOf(element);\n    if (index >= 0) {\n      this.children.splice(index, 1);\n      element.parent = null;\n      this.childrenChange(\"remove\", [element], index);\n    }\n    return this;\n  };\n  Group.prototype.removeAt = function removeAt(index) {\n    if (0 <= index && index < this.children.length) {\n      var element = this.children[index];\n      this.children.splice(index, 1);\n      element.parent = null;\n      this.childrenChange(\"remove\", [element], index);\n    }\n    return this;\n  };\n  Group.prototype.clear = function clear() {\n    var items = this.children;\n    this.children = [];\n    this._reparent(items, null);\n    this.childrenChange(\"remove\", items, 0);\n    return this;\n  };\n  Group.prototype.bbox = function bbox(transformation) {\n    return elementsBoundingBox(this.children, true, this.currentTransform(transformation));\n  };\n  Group.prototype.rawBBox = function rawBBox() {\n    return elementsBoundingBox(this.children, false);\n  };\n  Group.prototype._clippedBBox = function _clippedBBox(transformation) {\n    return elementsClippedBoundingBox(this.children, this.currentTransform(transformation));\n  };\n  Group.prototype.currentTransform = function currentTransform(transformation) {\n    return Element.prototype.currentTransform.call(this, transformation) || null;\n  };\n  Group.prototype.containsPoint = function containsPoint(point, parentTransform) {\n    if (this.visible()) {\n      var children = this.children;\n      var transform = this.currentTransform(parentTransform);\n      for (var idx = 0; idx < children.length; idx++) {\n        if (children[idx].containsPoint(point, transform)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  Group.prototype._reparent = function _reparent(elements, newParent) {\n    var this$1 = this;\n    for (var i = 0; i < elements.length; i++) {\n      var child = elements[i];\n      var parent = child.parent;\n      if (parent && parent !== this$1 && parent.remove) {\n        parent.remove(child);\n      }\n      child.parent = newParent;\n    }\n  };\n  Object.defineProperties(Group.prototype, prototypeAccessors);\n  return Group;\n}(traversable(Element, \"children\"));\nexport default Group;","map":null,"metadata":{},"sourceType":"module"}