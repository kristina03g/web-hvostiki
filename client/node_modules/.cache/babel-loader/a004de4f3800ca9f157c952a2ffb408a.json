{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString } from '../../utils';\nexport var ByteQRDataMode = function (QRDataMode) {\n  function ByteQRDataMode() {\n    QRDataMode.apply(this, arguments);\n  }\n  if (QRDataMode) ByteQRDataMode.__proto__ = QRDataMode;\n  ByteQRDataMode.prototype = Object.create(QRDataMode && QRDataMode.prototype);\n  ByteQRDataMode.prototype.constructor = ByteQRDataMode;\n  ByteQRDataMode.prototype.initProperties = function initProperties() {\n    QRDataMode.prototype.initProperties.call(this);\n    extend(this, {\n      bitsInCharacterCount: [8, 16, 16],\n      modeIndicator: \"0100\"\n    });\n  };\n  ByteQRDataMode.prototype.getValue = function getValue(character) {\n    var code = character.charCodeAt(0);\n    if (code <= 127 || 160 <= code && code <= 255) {\n      return code;\n    }\n    throw new Error(\"Unsupported character in QR Code: \\\"\" + character + \"\\\".\");\n  };\n  ByteQRDataMode.prototype.encode = function encode(str, version) {\n    var mode = this,\n      result = mode.getModeCountString(str.length, version);\n    for (var i = 0; i < str.length; i++) {\n      result += toBitsString(mode.getValue(str.charAt(i)), 8);\n    }\n    return result;\n  };\n  ByteQRDataMode.prototype.getStringBitsLength = function getStringBitsLength(inputLength, version) {\n    return 4 + this.getBitsCharacterCount(version) + 8 * inputLength;\n  };\n  return ByteQRDataMode;\n}(QRDataMode);","map":null,"metadata":{},"sourceType":"module"}