{"ast":null,"code":"import Class from './class';\nvar Observable = function (Class) {\n  function Observable() {\n    Class.call(this);\n    this._events = {};\n  }\n  if (Class) Observable.__proto__ = Class;\n  Observable.prototype = Object.create(Class && Class.prototype);\n  Observable.prototype.constructor = Observable;\n  Observable.prototype.bind = function bind(eventName, handlers, one) {\n    var arguments$1 = arguments;\n    var this$1 = this;\n    var eventNames = getArray(eventName);\n    var handlersIsFunction = isFunction(handlers);\n    var length = eventNames.length;\n    if (handlers === undefined) {\n      for (var field in eventName) {\n        this$1.bind(field, eventName[field]);\n      }\n      return this;\n    }\n    var loop = function loop(idx) {\n      var eventName$1 = eventNames[idx];\n      var _handler = handlersIsFunction ? handlers : handlers[eventName$1];\n      if (_handler) {\n        if (one) {\n          var original = _handler;\n          _handler = function handler() {\n            // eslint-disable-line no-loop-func\n            this$1.unbind(eventName$1, _handler);\n            original.apply(this$1, arguments$1);\n          };\n          _handler.original = original;\n        }\n        var events = this$1._events[eventName$1] = this$1._events[eventName$1] || [];\n        events.push(_handler);\n      }\n    };\n    for (var idx = 0; idx < length; idx++) loop(idx);\n    return this;\n  };\n  Observable.prototype.one = function one(eventNames, handlers) {\n    return this.bind(eventNames, handlers, true);\n  };\n  Observable.prototype.first = function first(eventName, handlers) {\n    var this$1 = this;\n    var eventNames = getArray(eventName);\n    var handlersIsFunction = isFunction(handlers);\n    for (var idx = 0, length = eventNames.length; idx < length; idx++) {\n      var eventName$1 = eventNames[idx];\n      var handler = handlersIsFunction ? handlers : handlers[eventName$1];\n      if (handler) {\n        var events = this$1._events[eventName$1] = this$1._events[eventName$1] || [];\n        events.unshift(handler);\n      }\n    }\n    return this;\n  };\n  Observable.prototype.trigger = function trigger(eventName, e) {\n    var this$1 = this;\n    if (e === void 0) e = {};\n    var events = this._events[eventName];\n    if (events) {\n      var length = events.length;\n      e.sender = this;\n      e._defaultPrevented = false;\n      e.preventDefault = preventDefault;\n      e.isDefaultPrevented = isDefaultPrevented;\n      events = events.slice();\n      for (var idx = 0; idx < length; idx++) {\n        events[idx].call(this$1, e);\n      }\n      return e._defaultPrevented === true;\n    }\n    return false;\n  };\n  Observable.prototype.unbind = function unbind(eventName, handler) {\n    var events = this._events[eventName];\n    if (eventName === undefined) {\n      this._events = {};\n    } else if (events) {\n      if (handler) {\n        for (var idx = events.length - 1; idx >= 0; idx--) {\n          if (events[idx] === handler || events[idx].original === handler) {\n            events.splice(idx, 1);\n          }\n        }\n      } else {\n        this._events[eventName] = [];\n      }\n    }\n    return this;\n  };\n  return Observable;\n}(Class);\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction getArray(value) {\n  return typeof value === \"string\" ? [value] : value;\n}\nfunction preventDefault() {\n  this._defaultPrevented = true;\n}\nfunction isDefaultPrevented() {\n  return this._defaultPrevented === true;\n}\nexport default Observable;","map":null,"metadata":{},"sourceType":"module"}