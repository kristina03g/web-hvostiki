{"ast":null,"code":"import { Class, deepExtend, setDefaultOptions } from '../../common';\nimport { SHOW_TOOLTIP, HIDE_TOOLTIP } from '../constants';\nexport var Tooltip = function (Class) {\n  function Tooltip(widgetService, options) {\n    Class.call(this);\n    this.widgetService = widgetService;\n    this.options = deepExtend({}, this.options, options);\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n  }\n  if (Class) Tooltip.__proto__ = Class;\n  Tooltip.prototype = Object.create(Class && Class.prototype);\n  Tooltip.prototype.constructor = Tooltip;\n  var prototypeAccessors = {\n    anchor: {\n      configurable: true\n    }\n  };\n  Tooltip.prototype.show = function show(anchor, args) {\n    if (this.location === args.location) {\n      return;\n    }\n    this.anchor = anchor;\n    this.location = args.location;\n    this.widgetService.notify(SHOW_TOOLTIP, Object.assign({\n      anchor: this.anchor\n    }, args));\n    this.visible = true;\n  };\n  Tooltip.prototype.hide = function hide() {\n    if (this.widgetService) {\n      this.widgetService.notify(HIDE_TOOLTIP);\n    }\n    this.visible = false;\n    this.location = null;\n  };\n  prototypeAccessors.anchor.get = function () {\n    return this._anchor;\n  };\n  prototypeAccessors.anchor.set = function (anchor) {\n    var documentPoint = this.widgetService.widget._toDocumentCoordinates({\n      x: anchor.left - this.offset.x,\n      y: anchor.top - this.offset.y\n    });\n    this._anchor = {\n      left: documentPoint.left,\n      top: documentPoint.top\n    };\n  };\n  Tooltip.prototype.destroy = function destroy() {\n    this.widgetService = null;\n  };\n  Object.defineProperties(Tooltip.prototype, prototypeAccessors);\n  return Tooltip;\n}(Class);\nsetDefaultOptions(Tooltip, {\n  border: {\n    width: 1\n  },\n  opacity: 1\n});","map":null,"metadata":{},"sourceType":"module"}