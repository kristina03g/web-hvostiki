{"ast":null,"code":"import { Code39 } from './code39';\nimport deepExtend from '../../common/deep-extend';\nexport var Code39ExtendedBase = {\n  addCharacter: function addCharacter(character) {\n    if (this.characterMap[character]) {\n      this.addBase(this.characterMap[character]);\n    } else if (character.charCodeAt(0) > 127) {\n      this.invalidCharacterError(character);\n    } else {\n      this.addExtended(character.charCodeAt(0));\n    }\n  },\n  addExtended: function addExtended(code) {\n    var this$1 = this;\n    var patterns;\n    for (var i = 0; i < this.extendedMappings.length; i++) {\n      patterns = this$1.extendedMappings[i].call(this$1, code);\n      if (patterns) {\n        for (var patternIndex = 0; patternIndex < patterns.length; patternIndex++) {\n          var pattern = patterns[patternIndex];\n          this$1.addBase(pattern);\n        }\n        this$1.dataLength += patterns.length - 1;\n        return;\n      }\n    }\n  },\n  extendedMappings: [function (code) {\n    if (97 <= code && code <= 122) {\n      return [this.characterMap[this.shiftCharacters[0]], this.characterMap[String.fromCharCode(code - 32)]];\n    }\n  }, function (code) {\n    if (33 <= code && code <= 58) {\n      return [this.characterMap[this.shiftCharacters[1]], this.characterMap[String.fromCharCode(code + 32)]];\n    }\n  }, function (code) {\n    if (1 <= code && code <= 26) {\n      return [this.characterMap[this.shiftCharacters[2]], this.characterMap[String.fromCharCode(code + 64)]];\n    }\n  }, function (code) {\n    var this$1 = this;\n    var result;\n    var dataCharacter;\n    if (!this.specialAsciiCodes[code]) {\n      dataCharacter = Math.floor(code / 32) * 6 + (code - 27) % 32 + 64;\n      result = [this.characterMap[this.shiftCharacters[3]], this.characterMap[String.fromCharCode(dataCharacter)]];\n    } else {\n      result = [];\n      for (var i = 0; i < this.specialAsciiCodes[code].length; i++) {\n        result.push(this$1.characterMap[this$1.shiftCharacters[3]]);\n        result.push(this$1.characterMap[this$1.specialAsciiCodes[code][i]]);\n      }\n    }\n    return result;\n  }],\n  specialAsciiCodes: {\n    \"0\": [\"U\"],\n    \"64\": [\"V\"],\n    \"96\": [\"W\"],\n    \"127\": [\"T\", \"X\", \"Y\", \"Z\"]\n  },\n  shiftValuesAsciiCodes: {\n    \"39\": 36,\n    \"40\": 47,\n    \"41\": 43,\n    \"42\": 37\n  },\n  characterMap: {\n    \"+\": false,\n    \"/\": false,\n    \"$\": false,\n    \"%\": false\n  },\n  shiftCharacters: [\"SHIFT0\", \"SHIFT1\", \"SHIFT2\", \"SHIFT3\"]\n};\nexport var Code39Extended = function (Code39) {\n  function Code39Extended() {\n    Code39.apply(this, arguments);\n  }\n  if (Code39) Code39Extended.__proto__ = Code39;\n  Code39Extended.prototype = Object.create(Code39 && Code39.prototype);\n  Code39Extended.prototype.constructor = Code39Extended;\n  Code39Extended.prototype.initProperties = function initProperties() {\n    Code39.prototype.initProperties.call(this);\n    deepExtend(this, Code39ExtendedBase, {\n      name: \"Code 39 extended\",\n      characterMap: {\n        SHIFT0: {\n          \"pattern\": \"bWbwbWbWb\",\n          \"value\": 41\n        },\n        SHIFT1: {\n          \"pattern\": \"bWbWbwbWb\",\n          \"value\": 40\n        },\n        SHIFT2: {\n          \"pattern\": \"bWbWbWbwb\",\n          \"value\": 39\n        },\n        SHIFT3: {\n          \"pattern\": \"bwbWbWbWb\",\n          \"value\": 42\n        }\n      }\n    });\n  };\n  return Code39Extended;\n}(Code39);","map":null,"metadata":{},"sourceType":"module"}