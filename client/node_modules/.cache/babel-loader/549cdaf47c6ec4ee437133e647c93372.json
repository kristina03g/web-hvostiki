{"ast":null,"code":"import { chartBaseTheme } from '@progress/kendo-charts';\nvar font = function font(style) {\n  return \"\".concat(style.fontWeight, \" \").concat(style.fontSize, \" \").concat(style.fontFamily);\n};\nvar computedBackgroundColor = function computedBackgroundColor(element) {\n  return window.getComputedStyle(element).backgroundColor;\n};\nvar letterPos = function letterPos(letter) {\n  return letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0);\n};\nvar seriesPos = function seriesPos(name) {\n  var alpha = name.match(/series-([a-z])$/);\n  if (alpha !== null) {\n    return letterPos(alpha[1]);\n  }\n  var num = name.split('--series-')[1];\n  return parseInt(num, 10) - 1;\n};\nvar SERIES_COLORS = 30;\nvar seriesTemplate = function seriesTemplate() {\n  var result = \"\\n      <div class=\\\"k-var--series-a\\\"></div>\\n      <div class=\\\"k-var--series-b\\\"></div>\\n      <div class=\\\"k-var--series-c\\\"></div>\\n      <div class=\\\"k-var--series-d\\\"></div>\\n      <div class=\\\"k-var--series-e\\\"></div>\\n      <div class=\\\"k-var--series-f\\\"></div>\\n\";\n  for (var i = 0; i < SERIES_COLORS; i++) {\n    result += \"\\n      <div class=\\\"k-var--series-\".concat(i + 1, \"\\\"></div>\");\n  }\n  return result;\n};\nvar template = \"\\n    <div class=\\\"k-var--primary\\\"></div>\\n    <div class=\\\"k-var--base\\\"></div>\\n    <div class=\\\"k-var--background\\\"></div>\\n\\n    <div class=\\\"k-var--normal-background\\\"></div>\\n    <div class=\\\"k-var--normal-text-color\\\"></div>\\n    <div class=\\\"k-var--hover-background\\\"></div>\\n    <div class=\\\"k-var--hover-text-color\\\"></div>\\n    <div class=\\\"k-var--selected-background\\\"></div>\\n    <div class=\\\"k-var--selected-text-color\\\"></div>\\n    <div class=\\\"k-var--chart-error-bars-background\\\"></div>\\n    <div class=\\\"k-var--chart-notes-background\\\"></div>\\n    <div class=\\\"k-var--chart-notes-border\\\"></div>\\n    <div class=\\\"k-var--chart-notes-lines\\\"></div>\\n    <div class=\\\"k-var--chart-crosshair-background\\\"></div>\\n\\n    <div class=\\\"k-var--chart-inactive\\\"></div>\\n    <div class=\\\"k-var--chart-major-lines\\\"></div>\\n    <div class=\\\"k-var--chart-minor-lines\\\"></div>\\n    <div class=\\\"k-var--chart-area-opacity\\\"></div>\\n    <div class=\\\"k-var--chart-area-inactive-opacity\\\"></div>\\n    <div class=\\\"k-var--chart-line-inactive-opacity\\\"></div>\\n\\n    <div class=\\\"k-widget k-chart\\\">\\n        <div class=\\\"k-var--chart-font\\\"></div>\\n        <div class=\\\"k-var--chart-title-font\\\"></div>\\n        <div class=\\\"k-var--chart-pane-title-font\\\"></div>\\n        <div class=\\\"k-var--chart-label-font\\\"></div>\\n    </div>\\n\\n    <div class=\\\"k-var--series-unset\\\"></div>\\n    <div class=\\\"k-var--series\\\">\\n      \".concat(seriesTemplate(), \"\\n    </div>\\n\");\n/**\n * @hidden\n */\nvar ThemeService = /** @class */function () {\n  function ThemeService(store) {\n    this.store = store;\n  }\n  ThemeService.prototype.setStyle = function (field, value) {\n    this.store.dispatch({\n      type: 'set',\n      payload: {\n        field: field,\n        value: value\n      }\n    });\n  };\n  ThemeService.prototype.setColors = function () {\n    this.mapColor('axisDefaults.crosshair.color', 'chart-crosshair-background');\n    this.mapColor('axisDefaults.labels.color', 'normal-text-color');\n    this.mapColor('axisDefaults.line.color', 'chart-major-lines');\n    this.mapColor('axisDefaults.majorGridLines.color', 'chart-major-lines');\n    this.mapColor('axisDefaults.minorGridLines.color', 'chart-minor-lines');\n    this.mapColor('axisDefaults.notes.icon.background', 'chart-notes-background');\n    this.mapColor('axisDefaults.notes.icon.border.color', 'chart-notes-border');\n    this.mapColor('axisDefaults.notes.line.color', 'chart-notes-lines');\n    this.mapColor('axisDefaults.title.color', 'normal-text-color');\n    this.mapColor('chartArea.background', 'background');\n    this.mapColor('legend.inactiveItems.labels.color', 'chart-inactive');\n    this.mapColor('legend.inactiveItems.markers.color', 'chart-inactive');\n    this.mapColor('legend.labels.color', 'normal-text-color');\n    this.mapColor('seriesDefaults.boxPlot.downColor', 'chart-major-lines');\n    this.mapColor('seriesDefaults.boxPlot.mean.color', 'base');\n    this.mapColor('seriesDefaults.boxPlot.median.color', 'base');\n    this.mapColor('seriesDefaults.boxPlot.whiskers.color', 'primary');\n    this.mapColor('seriesDefaults.bullet.target.color', 'normal-text-color');\n    this.mapColor('seriesDefaults.candlestick.downColor', 'normal-text-color');\n    this.mapColor('seriesDefaults.candlestick.line.color', 'normal-text-color');\n    this.mapColor('seriesDefaults.errorBars.color', 'chart-error-bars-background');\n    this.mapColor('seriesDefaults.horizontalWaterfall.line.color', 'chart-major-lines');\n    this.mapColor('seriesDefaults.icon.border.color', 'chart-major-lines');\n    this.mapColor('seriesDefaults.labels.background', 'background');\n    this.mapColor('seriesDefaults.labels.color', 'normal-text-color');\n    this.mapColor('seriesDefaults.notes.icon.background', 'chart-notes-background');\n    this.mapColor('seriesDefaults.notes.icon.border.color', 'chart-notes-border');\n    this.mapColor('seriesDefaults.notes.line.color', 'chart-notes-lines');\n    this.mapColor('seriesDefaults.verticalBoxPlot.downColor', 'chart-major-lines');\n    this.mapColor('seriesDefaults.verticalBoxPlot.mean.color', 'base');\n    this.mapColor('seriesDefaults.verticalBoxPlot.median.color', 'base');\n    this.mapColor('seriesDefaults.verticalBoxPlot.whiskers.color', 'primary');\n    this.mapColor('seriesDefaults.verticalBullet.target.color', 'normal-text-color');\n    this.mapColor('seriesDefaults.waterfall.line.color', 'chart-major-lines');\n    this.mapColor('title.color', 'normal-text-color');\n    this.mapColor('subtitle.color', 'normal-text-color');\n    var opacity = parseFloat(this.queryStyle('chart-area-opacity').opacity);\n    if (!isNaN(opacity)) {\n      this.setStyle('seriesDefaults.area.opacity', opacity);\n      this.setStyle('seriesDefaults.radarArea.opacity', opacity);\n      this.setStyle('seriesDefaults.verticalArea.opacity', opacity);\n      this.setStyle('seriesDefaults.labels.opacity', opacity);\n    }\n    this.setInactiveOpacity(['area', 'verticalArea'], 'chart-area-inactive-opacity');\n    this.setInactiveOpacity(['line', 'verticalLine'], 'chart-line-inactive-opacity');\n  };\n  ThemeService.prototype.setFonts = function () {\n    var defaultFont = font(this.queryStyle('chart-font'));\n    var titleFont = font(this.queryStyle('chart-title-font'));\n    var paneTitleFont = font(this.queryStyle('chart-pane-title-font'));\n    var labelFont = font(this.queryStyle('chart-label-font'));\n    this.setStyle('axisDefaults.labels.font', labelFont);\n    this.setStyle('axisDefaults.notes.label.font', defaultFont);\n    this.setStyle('axisDefaults.title.font', defaultFont);\n    this.setStyle('legend.labels.font', defaultFont);\n    this.setStyle('seriesDefaults.labels.font', labelFont);\n    this.setStyle('seriesDefaults.notes.label.font', defaultFont);\n    this.setStyle('title.font', titleFont);\n    this.setStyle('subtitle.font', paneTitleFont);\n    this.setStyle('paneDefaults.title.font', paneTitleFont);\n  };\n  ThemeService.prototype.setSeriesColors = function () {\n    var element = this.element;\n    var series = [].slice.call(element.querySelectorAll('.k-var--series div'));\n    var unsetColor = computedBackgroundColor(element.querySelector('.k-var--series-unset'));\n    var seriesColors = series.reduce(function (arr, el) {\n      var pos = seriesPos(el.className);\n      var color = computedBackgroundColor(el);\n      if (color !== unsetColor) {\n        arr[pos] = color;\n      }\n      return arr;\n    }, [] // Will populate the series colors in this array\n    );\n\n    this.setStyle('seriesColors', seriesColors);\n  };\n  ThemeService.prototype.mapColor = function (key, varName) {\n    this.setStyle(key, this.queryStyle(varName).backgroundColor);\n  };\n  ThemeService.prototype.queryStyle = function (varName) {\n    var element = this.element;\n    return window.getComputedStyle(element.querySelector(\".k-var--\".concat(varName)));\n  };\n  ThemeService.prototype.setInactiveOpacity = function (seriesTypes, selector) {\n    var _this = this;\n    var inactiveOpacity = parseFloat(this.queryStyle(selector).opacity);\n    if (!isNaN(inactiveOpacity) && inactiveOpacity < 1) {\n      seriesTypes.forEach(function (type) {\n        return _this.setStyle(\"seriesDefaults.\".concat(type, \".highlight.inactiveOpacity\"), inactiveOpacity);\n      });\n    }\n  };\n  return ThemeService;\n}();\n/**\n * @hidden\n */\nvar loadTheme = function loadTheme(store, done, doc) {\n  var service = new ThemeService(store);\n  if (typeof doc === 'undefined') {\n    store.dispatch({\n      type: 'push',\n      payload: chartBaseTheme()\n    });\n    return;\n  }\n  var container = service.element = doc.createElement('div');\n  container.style.display = 'none';\n  container.innerHTML = template;\n  doc.body.appendChild(container);\n  try {\n    store.dispatch({\n      type: 'push',\n      payload: chartBaseTheme()\n    });\n    service.setColors();\n    service.setFonts();\n    service.setSeriesColors();\n  } finally {\n    doc.body.removeChild(service.element);\n    delete service.element;\n    done();\n  }\n};\nexport { loadTheme };","map":null,"metadata":{},"sourceType":"module"}