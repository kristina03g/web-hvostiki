{"ast":null,"code":"import * as easingFunctions from './easing-functions';\nimport { limitValue, now } from '../util';\nimport { animationFrame, Class } from '../common';\nimport AnimationFactory from './animation-factory';\nvar Animation = function (Class) {\n  function Animation(element, options) {\n    Class.call(this);\n    this.options = Object.assign({}, this.options, options);\n    this.element = element;\n  }\n  if (Class) Animation.__proto__ = Class;\n  Animation.prototype = Object.create(Class && Class.prototype);\n  Animation.prototype.constructor = Animation;\n  var prototypeAccessors = {\n    options: {\n      configurable: true\n    }\n  };\n  Animation.create = function create(type, element, options) {\n    return AnimationFactory.current.create(type, element, options);\n  };\n  prototypeAccessors.options.get = function () {\n    return this._options || {\n      duration: 500,\n      easing: \"swing\"\n    };\n  };\n  prototypeAccessors.options.set = function (value) {\n    this._options = value;\n  };\n  Animation.prototype.setup = function setup() {};\n  Animation.prototype.step = function step() {};\n  Animation.prototype.play = function play() {\n    var this$1 = this;\n    var options = this.options;\n    var duration = options.duration;\n    var delay = options.delay;\n    if (delay === void 0) delay = 0;\n    var easing = easingFunctions[options.easing];\n    var start = now() + delay;\n    var finish = start + duration;\n    if (duration === 0) {\n      this.step(1);\n      this.abort();\n    } else {\n      setTimeout(function () {\n        var loop = function loop() {\n          if (this$1._stopped) {\n            return;\n          }\n          var wallTime = now();\n          var time = limitValue(wallTime - start, 0, duration);\n          var position = time / duration;\n          var easingPosition = easing(position, time, 0, 1, duration);\n          this$1.step(easingPosition);\n          if (wallTime < finish) {\n            animationFrame(loop);\n          } else {\n            this$1.abort();\n          }\n        };\n        loop();\n      }, delay);\n    }\n  };\n  Animation.prototype.abort = function abort() {\n    this._stopped = true;\n  };\n  Animation.prototype.destroy = function destroy() {\n    this.abort();\n  };\n  Object.defineProperties(Animation.prototype, prototypeAccessors);\n  return Animation;\n}(Class);\nexport default Animation;","map":null,"metadata":{},"sourceType":"module"}