{"ast":null,"code":"import PathNode from './path-node';\nimport { createPromise } from '../util';\nvar ImageNode = function (PathNode) {\n  function ImageNode(srcElement, cors) {\n    PathNode.call(this, srcElement);\n    this.onLoad = this.onLoad.bind(this);\n    this.onError = this.onError.bind(this);\n    this.loading = createPromise();\n    var img = this.img = new Image();\n    var src = srcElement.src();\n    if (cors && !/^data:/i.test(src)) {\n      img.crossOrigin = cors;\n    }\n    if (src) {\n      img.src = src;\n    }\n    if (img.complete) {\n      this.onLoad();\n    } else {\n      img.onload = this.onLoad;\n      img.onerror = this.onError;\n    }\n  }\n  if (PathNode) ImageNode.__proto__ = PathNode;\n  ImageNode.prototype = Object.create(PathNode && PathNode.prototype);\n  ImageNode.prototype.constructor = ImageNode;\n  ImageNode.prototype.renderTo = function renderTo(ctx) {\n    if (this.loading.state() === \"resolved\") {\n      ctx.save();\n      this.setTransform(ctx);\n      this.setClip(ctx);\n      this.drawImage(ctx);\n      ctx.restore();\n    }\n  };\n  ImageNode.prototype.optionsChange = function optionsChange(e) {\n    if (e.field === \"src\") {\n      this.loading = createPromise();\n      this.img.src = this.srcElement.src();\n    } else {\n      PathNode.prototype.optionsChange.call(this, e);\n    }\n  };\n  ImageNode.prototype.onLoad = function onLoad() {\n    this.loading.resolve();\n    this.invalidate();\n  };\n  ImageNode.prototype.onError = function onError() {\n    this.loading.reject(new Error(\"Unable to load image '\" + this.img.src + \"'. Check for connectivity and verify CORS headers.\"));\n  };\n  ImageNode.prototype.drawImage = function drawImage(ctx) {\n    var rect = this.srcElement.rect();\n    var topLeft = rect.topLeft();\n    ctx.drawImage(this.img, topLeft.x, topLeft.y, rect.width(), rect.height());\n  };\n  return ImageNode;\n}(PathNode);\nexport default ImageNode;","map":null,"metadata":{},"sourceType":"module"}