{"ast":null,"code":"/**\n * @hidden\n */\nexport var FOCUSABLE_ELEMENTS = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];\n/**\n * @hidden\n */\nvar Navigation = /** @class */function () {\n  function Navigation(options) {\n    var _this = this;\n    this.rovingTabIndex = true;\n    this.update = function () {};\n    this.focusNextIndex = function (target, indexDiff) {\n      var all = _this.elements;\n      var index = all.indexOf(target) + indexDiff;\n      index = index < 0 ? all.length - 1 : index;\n      _this.focusElement(all[index % all.length], target);\n    };\n    this.tabIndex = options.tabIndex || 0;\n    this.root = options.root;\n    this.selectors = options.selectors;\n    this.rovingTabIndex = options.rovingTabIndex !== undefined ? options.rovingTabIndex : true;\n    this.mouseEvents = options.mouseEvents || {};\n    this.keyboardEvents = options.keyboardEvents || {};\n  }\n  Object.defineProperty(Navigation.prototype, \"elements\", {\n    get: function get() {\n      return this.root.current ? Array.from(this.root.current.querySelectorAll(this.selectors.join(','))) : [];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Navigation.prototype, \"first\", {\n    get: function get() {\n      return this.root.current && this.root.current.querySelector(this.selectors.join(',')) || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Navigation.prototype, \"last\", {\n    get: function get() {\n      var all = this.elements;\n      return all[all.length - 1] || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Navigation.prototype, \"current\", {\n    get: function get() {\n      return this.elements.find(function (el) {\n        return el.matches(':focus');\n      }) || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Navigation.prototype.focusNext = function (target) {\n    this.focusNextIndex(target, 1);\n  };\n  Navigation.prototype.focusPrevious = function (target) {\n    this.focusNextIndex(target, -1);\n  };\n  Navigation.prototype.triggerKeyboardEvent = function (ev) {\n    var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(','));\n    var key = ev.key === ' ' ? 'Space' : ev.key;\n    var eventType = ev.nativeEvent.type;\n    if (target && this.keyboardEvents[eventType][key]) {\n      this.keyboardEvents[eventType][key].call(undefined, target, this, ev);\n    }\n  };\n  Navigation.prototype.triggerMouseEvent = function (ev) {\n    var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(','));\n    var eventType = ev.nativeEvent.type;\n    if (target) {\n      this.mouseEvents[eventType].call(undefined, target, this, ev);\n    }\n  };\n  Navigation.prototype.focusElement = function (element, previous) {\n    if (element) {\n      if (previous) {\n        if (this.rovingTabIndex) {\n          previous.removeAttribute('tabindex');\n        }\n        previous.classList.remove('k-focus');\n      }\n      if (this.rovingTabIndex) {\n        element.setAttribute('tabindex', String(this.tabIndex));\n      }\n      element.focus({\n        preventScroll: true\n      });\n    }\n  };\n  return Navigation;\n}();\nexport { Navigation };\n;","map":null,"metadata":{},"sourceType":"module"}