{"ast":null,"code":"var DELETED = {};\nvar LegacySet = function LegacySet(values) {\n  var this$1 = this;\n  this._index = {};\n  this._values = values ? values.slice(0) : [];\n  for (var i = 0; i < this._values.length; i++) {\n    this$1._index[this$1._values[i]] = i;\n  }\n};\nvar prototypeAccessors = {\n  size: {\n    configurable: true\n  }\n};\nLegacySet.prototype.values = function values() {\n  return this._values.filter(function (item) {\n    return item !== DELETED;\n  });\n};\nLegacySet.prototype.has = function has(value) {\n  return this._index[value] !== undefined;\n};\nLegacySet.prototype.add = function add(value) {\n  if (!this.has(value)) {\n    this._index[value] = this._values.length;\n    this._values.push(value);\n  }\n};\nLegacySet.prototype.delete = function delete$1(value) {\n  var index = this._index[value];\n  if (index !== undefined) {\n    this._values[index] = DELETED;\n    delete this._index[value];\n  }\n};\nLegacySet.prototype.clear = function clear() {\n  this._index = {};\n  this._values = [];\n};\nprototypeAccessors.size.get = function () {\n  return this._values.length;\n};\nObject.defineProperties(LegacySet.prototype, prototypeAccessors);\nvar SetWrapper = function SetWrapper(values) {\n  this._set = new Set(values);\n};\nvar prototypeAccessors$1 = {\n  size: {\n    configurable: true\n  }\n};\nSetWrapper.prototype.values = function values() {\n  return Array.from(this._set);\n};\nSetWrapper.prototype.has = function has(value) {\n  return this._set.has(value);\n};\nSetWrapper.prototype.add = function add(value) {\n  this._set.add(value);\n};\nSetWrapper.prototype.delete = function delete$2(value) {\n  this._set.delete(value);\n};\nSetWrapper.prototype.clear = function clear() {\n  this._set.clear();\n};\nprototypeAccessors$1.size.get = function () {\n  return this._set.size;\n};\nObject.defineProperties(SetWrapper.prototype, prototypeAccessors$1);\n\n// TODO: Drop LegacySet when removing support for IE10\nvar supportsSet = function supportsSet() {\n  var supported = false;\n  if (typeof Set === 'function') {\n    var set = new Set([1]);\n    supported = set.has(1);\n  }\n  return supported;\n};\nexport default function createHashSet(values) {\n  if (supportsSet()) {\n    return new SetWrapper(values);\n  }\n  return new LegacySet(values);\n}","map":null,"metadata":{},"sourceType":"module"}