{"ast":null,"code":"import { deepExtend, defined, isFunction, setDefaultOptions } from '../../common';\nimport { MAX_VALUE, MIN_VALUE } from '../../common/constants';\nimport { Box, ChartElement } from '../../core';\nimport CategoricalChart from '../categorical-chart';\nimport evalOptions from '../utils/eval-options';\nimport colorScale from './color-scale';\nimport HeatmapPoint from './heatmap-point';\nvar HeatmapChart = function (ChartElement) {\n  function HeatmapChart(plotArea, options) {\n    ChartElement.call(this, options);\n    this.plotArea = plotArea;\n    this.chartService = plotArea.chartService;\n    this._initFields();\n    this.render();\n  }\n  if (ChartElement) HeatmapChart.__proto__ = ChartElement;\n  HeatmapChart.prototype = Object.create(ChartElement && ChartElement.prototype);\n  HeatmapChart.prototype.constructor = HeatmapChart;\n  HeatmapChart.prototype._initFields = function _initFields() {\n    this.points = [];\n    this.seriesOptions = [];\n    this.valueRange = {\n      min: MAX_VALUE,\n      max: MIN_VALUE\n    };\n    this._evalSeries = [];\n  };\n  HeatmapChart.prototype.render = function render() {\n    this.setRange();\n    this.traverseDataPoints(this.addValue.bind(this));\n  };\n  HeatmapChart.prototype.setRange = function setRange() {\n    var this$1 = this;\n    var ref = this;\n    var series = ref.options.series;\n    for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      for (var pointIx = 0; pointIx < currentSeries.data.length; pointIx++) {\n        var ref$1 = this$1._bindPoint(currentSeries, seriesIx, pointIx);\n        var valueFields = ref$1.valueFields;\n        if (defined(valueFields.value) && valueFields.value !== null) {\n          this$1.valueRange.min = Math.min(this$1.valueRange.min, valueFields.value);\n          this$1.valueRange.max = Math.max(this$1.valueRange.max, valueFields.value);\n        }\n      }\n    }\n  };\n  HeatmapChart.prototype.addValue = function addValue(value, fields) {\n    var point;\n    if (value && defined(value.value) && value.value !== null) {\n      point = this.createPoint(value, fields);\n      if (point) {\n        Object.assign(point, fields);\n      }\n    }\n    this.points.push(point);\n  };\n  HeatmapChart.prototype.evalPointOptions = function evalPointOptions(options, value, fields) {\n    var series = fields.series;\n    var seriesIx = fields.seriesIx;\n    var state = {\n      defaults: series._defaults,\n      excluded: [\"data\", \"tooltip\", \"content\", \"template\", \"visual\", \"toggle\"]\n    };\n    var doEval = this._evalSeries[seriesIx];\n    if (!defined(doEval)) {\n      this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);\n    }\n    var pointOptions = options;\n    if (doEval) {\n      pointOptions = deepExtend({}, options);\n      evalOptions(pointOptions, {\n        value: value,\n        series: series,\n        dataItem: fields.dataItem,\n        min: this.valueRange.min,\n        max: this.valueRange.max\n      }, state);\n    }\n    return pointOptions;\n  };\n  HeatmapChart.prototype.pointType = function pointType() {\n    return HeatmapPoint;\n  };\n  HeatmapChart.prototype.pointOptions = function pointOptions(series, seriesIx) {\n    var options = this.seriesOptions[seriesIx];\n    if (!options) {\n      var defaults = this.pointType().prototype.defaults;\n      this.seriesOptions[seriesIx] = options = deepExtend({}, defaults, {\n        markers: {\n          opacity: series.opacity\n        },\n        tooltip: {\n          format: this.options.tooltip.format\n        },\n        labels: {\n          format: this.options.labels.format\n        }\n      }, series);\n    }\n    return options;\n  };\n  HeatmapChart.prototype.createPoint = function createPoint(value, fields) {\n    var series = fields.series;\n    var pointOptions = this.pointOptions(series, fields.seriesIx);\n    var color = fields.color || series.color;\n    pointOptions = this.evalPointOptions(pointOptions, value, fields);\n    if (isFunction(series.color)) {\n      color = pointOptions.color;\n    } else if (this.valueRange.max !== 0) {\n      var scale = colorScale(color);\n      color = scale(value.value / this.valueRange.max);\n    }\n    var point = new HeatmapPoint(value, pointOptions);\n    point.color = color;\n    this.append(point);\n    return point;\n  };\n  HeatmapChart.prototype.seriesAxes = function seriesAxes(series) {\n    var xAxisName = series.xAxis;\n    var yAxisName = series.yAxis;\n    var plotArea = this.plotArea;\n    var xAxis = xAxisName ? plotArea.namedXAxes[xAxisName] : plotArea.axisX;\n    var yAxis = yAxisName ? plotArea.namedYAxes[yAxisName] : plotArea.axisY;\n    if (!xAxis) {\n      throw new Error(\"Unable to locate X axis with name \" + xAxisName);\n    }\n    if (!yAxis) {\n      throw new Error(\"Unable to locate Y axis with name \" + yAxisName);\n    }\n    return {\n      xAxis: xAxis,\n      yAxis: yAxis\n    };\n  };\n  HeatmapChart.prototype.reflow = function reflow(targetBox) {\n    var this$1 = this;\n    var chartPoints = this.points;\n    var limit = !this.options.clip;\n    var pointIx = 0;\n    this.traverseDataPoints(function (value, fields) {\n      var point = chartPoints[pointIx++];\n      var ref = this$1.seriesAxes(fields.series);\n      var xAxis = ref.xAxis;\n      var yAxis = ref.yAxis;\n      var indexX = xAxis.categoryIndex(value.x);\n      var indexY = yAxis.categoryIndex(value.y);\n      var slotX = xAxis.getSlot(indexX, indexX, limit);\n      var slotY = yAxis.getSlot(indexY, indexY, limit);\n      if (point) {\n        if (slotX && slotY) {\n          var pointSlot = this$1.pointSlot(slotX, slotY);\n          point.reflow(pointSlot);\n        } else {\n          point.visible = false;\n        }\n      }\n    });\n    this.box = targetBox;\n  };\n  HeatmapChart.prototype.pointSlot = function pointSlot(slotX, slotY) {\n    return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);\n  };\n  HeatmapChart.prototype.traverseDataPoints = function traverseDataPoints(callback) {\n    var this$1 = this;\n    var ref = this;\n    var series = ref.options.series;\n    for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      var ref$1 = this$1.seriesAxes(currentSeries);\n      var xAxis = ref$1.xAxis;\n      var yAxis = ref$1.yAxis;\n      var xRange = xAxis.currentRangeIndices();\n      var yRange = yAxis.currentRangeIndices();\n      for (var pointIx = 0; pointIx < currentSeries.data.length; pointIx++) {\n        var ref$2 = this$1._bindPoint(currentSeries, seriesIx, pointIx);\n        var value = ref$2.valueFields;\n        var fields = ref$2.fields;\n        var xIndex = xAxis.totalIndex(value.x);\n        var yIndex = yAxis.totalIndex(value.y);\n        var xIn = xRange.min <= xIndex && xIndex <= xRange.max;\n        var yIn = yRange.min <= yIndex && yIndex <= yRange.max;\n        if (xIn && yIn) {\n          callback(value, deepExtend({\n            pointIx: pointIx,\n            series: currentSeries,\n            seriesIx: seriesIx,\n            dataItem: currentSeries.data[pointIx],\n            owner: this$1\n          }, fields));\n        }\n      }\n    }\n  };\n  HeatmapChart.prototype.formatPointValue = function formatPointValue(point, format) {\n    var value = point.value;\n    return this.chartService.format.auto(format, value.x, value.y, value.value);\n  };\n  HeatmapChart.prototype.animationPoints = function animationPoints() {\n    var points = this.points;\n    var result = [];\n    for (var idx = 0; idx < points.length; idx++) {\n      result.push((points[idx] || {}).marker);\n    }\n    return result;\n  };\n  return HeatmapChart;\n}(ChartElement);\nsetDefaultOptions(HeatmapChart, {\n  series: [],\n  tooltip: {\n    format: \"{0}, {1}: {2}\"\n  },\n  labels: {\n    format: \"{2}\"\n  },\n  clip: true\n});\ndeepExtend(HeatmapChart.prototype, {\n  _bindPoint: CategoricalChart.prototype._bindPoint\n});\nexport default HeatmapChart;","map":null,"metadata":{},"sourceType":"module"}