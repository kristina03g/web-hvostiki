{"ast":null,"code":"import * as React from 'react';\nimport { noop } from '../noop';\nimport { useInheritedState } from '../hooks/useInheritedState';\nimport { DropContext, DropsContext } from '../drag-n-drop/context';\n/**\n * Represents the KendoReact `useDroppable` hook.\n * Use it to attach `drop` events to a native HTML DOM elements, or custom React Components.\n *\n * For more information, refer to the [KendoReact Droppable]({% slug droppable_drag-and-drop %}) article.\n *\n * @param ref - The `ref` of the HTML Element or React Component which will enable the `droppable` functionality.\n * @param callbacks - A collection of callbacks, called by the `useDroppable` hook when a specific action occurs.\n */\nexport function useDroppable(ref, callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {\n      onDragEnter: noop,\n      onDragOver: noop,\n      onDragLeave: noop,\n      onDrop: noop\n    };\n  }\n  var _a = callbacks.onDragEnter,\n    onDragEnter = _a === void 0 ? noop : _a,\n    _b = callbacks.onDragOver,\n    onDragOver = _b === void 0 ? noop : _b,\n    _c = callbacks.onDragLeave,\n    onDragLeave = _c === void 0 ? noop : _c,\n    _d = callbacks.onDrop,\n    onDrop = _d === void 0 ? noop : _d;\n  var _e = useInheritedState(DropContext),\n    setDrop = _e[1];\n  var _f = React.useContext(DropsContext),\n    registerDrop = _f[1],\n    deregisterDrop = _f[2];\n  var getElement = React.useCallback(function () {\n    return ref.current && ref.current.element ? ref.current.element : ref.current;\n  }, [ref]);\n  var target = React.useRef(null);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: getElement(),\n      onDragEnter: handleDragEnter,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      onDrop: handleDrop,\n      data: ref.current\n    };\n  });\n  var handleDragEnter = React.useCallback(function (event) {\n    setDrop(target, {\n      target: ref.current,\n      event: event\n    });\n    onDragEnter(event);\n  }, [setDrop, ref, onDragEnter]);\n  var handleDragOver = React.useCallback(function (event) {\n    onDragOver(event);\n  }, [onDragOver]);\n  var handleDragLeave = React.useCallback(function (event) {\n    setDrop(null, {\n      target: ref.current,\n      event: event\n    });\n    onDragLeave(event);\n  }, [setDrop, ref, onDragLeave]);\n  var handleDrop = React.useCallback(function (event) {\n    setDrop(null, {\n      target: ref.current,\n      event: event\n    });\n    onDrop(event);\n  }, [setDrop, ref, onDrop]);\n  var register = React.useCallback(function () {\n    registerDrop(target);\n    return function () {\n      deregisterDrop(target);\n    };\n  }, [deregisterDrop, registerDrop]);\n  React.useLayoutEffect(register, [register]);\n}\n;","map":null,"metadata":{},"sourceType":"module"}