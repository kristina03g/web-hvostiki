{"ast":null,"code":"import IntlService from './intl-service';\nimport { FORMAT_REGEX } from '../common/constants';\nimport { isString } from '../common';\nvar FORMAT_REPLACE_REGEX = /\\{(\\d+)(:[^\\}]+)?\\}/g;\nvar FormatService = function FormatService(intlService) {\n  this._intlService = intlService;\n};\nvar prototypeAccessors = {\n  intl: {\n    configurable: true\n  }\n};\nprototypeAccessors.intl.get = function () {\n  return this._intlService || IntlService.implementation;\n};\nprototypeAccessors.intl.set = function (value) {\n  this._intlService = value;\n};\nFormatService.prototype.auto = function auto(formatString) {\n  var values = [],\n    len = arguments.length - 1;\n  while (len-- > 0) values[len] = arguments[len + 1];\n  var intl = this.intl;\n  if (isString(formatString) && formatString.match(FORMAT_REGEX)) {\n    return intl.format.apply(intl, [formatString].concat(values));\n  }\n  return intl.toString(values[0], formatString);\n};\nFormatService.prototype.localeAuto = function localeAuto(formatString, values, locale) {\n  var intl = this.intl;\n  var result;\n  if (isString(formatString) && formatString.match(FORMAT_REGEX)) {\n    result = formatString.replace(FORMAT_REPLACE_REGEX, function (match, index, placeholderFormat) {\n      var value = values[parseInt(index, 10)];\n      return intl.toString(value, placeholderFormat ? placeholderFormat.substring(1) : \"\", locale);\n    });\n  } else {\n    result = intl.toString(values[0], formatString, locale);\n  }\n  return result;\n};\nObject.defineProperties(FormatService.prototype, prototypeAccessors);\nexport default FormatService;","map":null,"metadata":{},"sourceType":"module"}