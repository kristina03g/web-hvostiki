{"ast":null,"code":"import * as React from 'react';\nimport { useDraggable } from './hooks';\n/**\n * Represents the KendoReact Draggable component.\n *\n * Accepts properties of type [DraggableProps]({% slug api_common_draggableprops %}),\n * and returns an object of type [DraggableHandle]({% slug api_common_draggablehandle %}) when the `ref` is obtained.\n */\nexport var Draggable = React.forwardRef(function (props, ref) {\n  var childRef = React.useRef(null);\n  var target = React.useRef(null);\n  var getElement = React.useCallback(function () {\n    return childRef.current && childRef.current.element ? childRef.current.element : childRef.current;\n  }, [childRef]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: getElement() || null\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  React.useImperativeHandle(props.childRef, function () {\n    return childRef.current;\n  });\n  var handlePress = React.useCallback(function (event) {\n    if (!props.onPress) {\n      return;\n    }\n    props.onPress({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [getElement, props.onPress]);\n  var handleRelease = React.useCallback(function (event) {\n    if (!props.onRelease) {\n      return;\n    }\n    props.onRelease({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [getElement, props.onRelease]);\n  var handleDragStart = React.useCallback(function (event) {\n    if (!props.onDragStart) {\n      return;\n    }\n    props.onDragStart({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [props, getElement]);\n  var handleDrag = React.useCallback(function (event) {\n    if (!props.onDrag) {\n      return;\n    }\n    props.onDrag({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [getElement, props.onDrag]);\n  var handleDragEnd = React.useCallback(function (event) {\n    if (!props.onDragEnd) {\n      return;\n    }\n    props.onDragEnd({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [getElement, props.onDragEnd]);\n  useDraggable(childRef, {\n    onPress: handlePress,\n    onRelease: handleRelease,\n    onDragStart: handleDragStart,\n    onDrag: handleDrag,\n    onDragEnd: handleDragEnd\n  }, {\n    mouseOnly: props.mouseOnly,\n    autoScroll: props.autoScroll,\n    hint: props.hint,\n    scrollContainer: props.scrollContainer\n  });\n  return props.children ? React.cloneElement(React.Children.only(props.children), {\n    ref: childRef\n  }) : null;\n});\nDraggable.displayName = 'KendoReactDraggable';","map":null,"metadata":{},"sourceType":"module"}