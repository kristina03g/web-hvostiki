{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { InstanceObserver } from '@progress/kendo-charts';\nimport { TooltipPoint } from './Point';\nimport { SharedTooltipContent } from './SharedTooltipContent';\nimport { TooltipPopup } from './Popup';\nimport { ChartContext } from '../ChartContext';\nvar SHARED_TOOLTIP_CLASS = 'k-chart-shared-tooltip';\nvar INVERSE_TOOLTIP_CLASS = 'k-chart-tooltip-inverse';\n/**\n * @hidden\n */\nvar SeriesTooltip = /** @class */function (_super) {\n  __extends(SeriesTooltip, _super);\n  function SeriesTooltip() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.context = null;\n    _this.state = {\n      popupShown: false\n    };\n    _this.chartObserver = null;\n    return _this;\n  }\n  SeriesTooltip.prototype.componentDidMount = function () {\n    // This is moved here as calls to the listed methods contains setState which is restricted before component mount\n    this.chartObserver = new InstanceObserver(this, {\n      showTooltip: 'onShowTooltip',\n      hideTooltip: 'onHideTooltip'\n    });\n    this.context.observersStore.dispatch({\n      type: 'add',\n      payload: this.chartObserver\n    });\n  };\n  SeriesTooltip.prototype.render = function () {\n    var _a;\n    var _this = this;\n    var _b = this.state,\n      popupContext = _b.popupContext,\n      shared = _b.shared,\n      className = _b.className,\n      tooltipProps = __rest(_b, [\"popupContext\", \"shared\", \"className\"]);\n    var tooltipContent = this.state.popupShown ? function () {\n      var render = _this.findRenderFunction();\n      if (shared) {\n        return render !== null ? render(popupContext) : React.createElement(SharedTooltipContent, __assign({}, popupContext));\n      } else {\n        var point = popupContext.point;\n        var seriesRenderer = _this.findRenderFunctionByIndex(point.series.index);\n        if (seriesRenderer !== null) {\n          return seriesRenderer(popupContext);\n        } else if (render !== null) {\n          return render(popupContext);\n        } else {\n          return React.createElement(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: popupContext.point.formattedValue\n            }\n          });\n        }\n      }\n    } : Function.prototype;\n    var popupContainerClassName = classNames((_a = {}, _a[SHARED_TOOLTIP_CLASS] = shared, _a[INVERSE_TOOLTIP_CLASS] = !!className, _a));\n    return React.createElement(TooltipPopup, __assign({}, tooltipProps, {\n      popupContent: tooltipContent,\n      className: popupContainerClassName\n    }));\n  };\n  SeriesTooltip.prototype.componentWillUnmount = function () {\n    this.context.observersStore.dispatch({\n      type: 'remove',\n      payload: this.chartObserver\n    });\n  };\n  SeriesTooltip.prototype.onShowTooltip = function (e) {\n    var anchor = e.anchor,\n      style = e.style,\n      shared = e.shared,\n      className = e.className,\n      crosshair = e.crosshair;\n    var context;\n    if (crosshair) {\n      return;\n    }\n    if (shared) {\n      context = this.createSharedTooltipContext(e);\n    } else {\n      context = this.createTooltipContext(e);\n    }\n    this.setState({\n      popupShown: true,\n      popupAlign: anchor.align,\n      popupOffset: anchor.point,\n      popupContext: context,\n      popupStyles: style,\n      className: className,\n      shared: shared\n    });\n  };\n  SeriesTooltip.prototype.onHideTooltip = function () {\n    this.setState({\n      popupShown: false,\n      popupStyles: {},\n      className: undefined\n    });\n  };\n  SeriesTooltip.prototype.createSharedTooltipContext = function (e) {\n    var points = e.points,\n      categoryText = e.categoryText;\n    var nameColumn = points.filter(function (point) {\n      return typeof point.series.name !== 'undefined';\n    }).length > 0;\n    var colorMarker = e.series.length > 1;\n    var colspan = 1;\n    if (nameColumn) {\n      colspan++;\n    }\n    if (colorMarker) {\n      colspan++;\n    }\n    return {\n      categoryText: categoryText,\n      colorMarker: colorMarker,\n      colspan: colspan,\n      nameColumn: nameColumn,\n      points: e.points.map(function (point) {\n        return new TooltipPoint(point, e.format);\n      })\n    };\n  };\n  SeriesTooltip.prototype.createTooltipContext = function (e) {\n    var point = e.point,\n      format = e.format;\n    return {\n      point: new TooltipPoint(point, format)\n    };\n  };\n  SeriesTooltip.prototype.findRenderFunctionByIndex = function (seriesIdx) {\n    var series = this.context.optionsStore.getState().series;\n    if (series !== undefined && Array.isArray(series) && series[seriesIdx] !== undefined && series[seriesIdx].hasOwnProperty('tooltip') && series[seriesIdx].tooltip.hasOwnProperty('render')) {\n      return series[seriesIdx].tooltip.render;\n    }\n    return null;\n  };\n  SeriesTooltip.prototype.findRenderFunction = function () {\n    var tooltip = this.context.optionsStore.getState().tooltip;\n    if (tooltip !== undefined && tooltip.hasOwnProperty('render')) {\n      return tooltip.render;\n    }\n    return null;\n  };\n  SeriesTooltip.contextType = ChartContext;\n  return SeriesTooltip;\n}(React.Component);\nexport { SeriesTooltip };","map":null,"metadata":{},"sourceType":"module"}