{"ast":null,"code":"import HasObservers from '../core/has-observers';\nimport withAccessors from '../mixins/with-accessors';\nimport { defined, round } from '../util';\nvar Size = function (superclass) {\n  function Size(width, height) {\n    superclass.call(this);\n    this.width = width || 0;\n    this.height = height || 0;\n  }\n  if (superclass) Size.__proto__ = superclass;\n  Size.prototype = Object.create(superclass && superclass.prototype);\n  Size.prototype.constructor = Size;\n  var staticAccessors = {\n    ZERO: {\n      configurable: true\n    }\n  };\n  Size.prototype.equals = function equals(other) {\n    return other && other.width === this.width && other.height === this.height;\n  };\n  Size.prototype.clone = function clone() {\n    return new Size(this.width, this.height);\n  };\n  Size.prototype.toArray = function toArray(digits) {\n    var doRound = defined(digits);\n    var width = doRound ? round(this.width, digits) : this.width;\n    var height = doRound ? round(this.height, digits) : this.height;\n    return [width, height];\n  };\n  Size.create = function create(arg0, arg1) {\n    if (defined(arg0)) {\n      if (arg0 instanceof Size) {\n        return arg0;\n      } else if (arguments.length === 1 && arg0.length === 2) {\n        return new Size(arg0[0], arg0[1]);\n      }\n      return new Size(arg0, arg1);\n    }\n  };\n  staticAccessors.ZERO.get = function () {\n    return new Size(0, 0);\n  };\n  Object.defineProperties(Size, staticAccessors);\n  return Size;\n}(withAccessors(HasObservers, [\"width\", \"height\"]));\nexport default Size;","map":null,"metadata":{},"sourceType":"module"}