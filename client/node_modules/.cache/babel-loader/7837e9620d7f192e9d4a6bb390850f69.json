{"ast":null,"code":"import Matrix from '../geometry/matrix';\nimport toMatrix from '../geometry/to-matrix';\nvar IDENTITY_MATRIX_HASH = Matrix.IDENTITY.toString();\nvar measurable = function measurable(TBase) {\n  return function (TBase) {\n    function anonymous() {\n      TBase.apply(this, arguments);\n    }\n    if (TBase) anonymous.__proto__ = TBase;\n    anonymous.prototype = Object.create(TBase && TBase.prototype);\n    anonymous.prototype.constructor = anonymous;\n    anonymous.prototype.bbox = function bbox(transformation) {\n      var combinedMatrix = toMatrix(this.currentTransform(transformation));\n      var matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;\n      var bbox;\n      if (this._bboxCache && this._matrixHash === matrixHash) {\n        bbox = this._bboxCache.clone();\n      } else {\n        bbox = this._bbox(combinedMatrix);\n        this._bboxCache = bbox ? bbox.clone() : null;\n        this._matrixHash = matrixHash;\n      }\n      var strokeWidth = this.options.get(\"stroke.width\");\n      if (strokeWidth && bbox) {\n        bbox.expand(strokeWidth / 2);\n      }\n      return bbox;\n    };\n    anonymous.prototype.geometryChange = function geometryChange() {\n      delete this._bboxCache;\n      this.trigger(\"geometryChange\", {\n        element: this\n      });\n    };\n    return anonymous;\n  }(TBase);\n};\nexport default measurable;","map":null,"metadata":{},"sourceType":"module"}