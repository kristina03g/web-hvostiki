{"ast":null,"code":"import { support } from '../common';\n\n/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n\n// XXX: remove this junk (assume `true`) when we no longer have to support IE < 10\n// IE 9 (at least compatibility) reports having Uint8Array but the request response does not contain ArrayBuffer which results in missing table head error\nvar HAS_TYPED_ARRAYS = typeof Uint8Array !== 'undefined' && support.browser && (!support.browser.msie || support.browser.version > 9);\nvar BASE64 = function () {\n  var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  return {\n    decode: function decode(str) {\n      var input = str.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\"),\n        i = 0,\n        n = input.length,\n        output = [];\n      while (i < n) {\n        var enc1 = keyStr.indexOf(input.charAt(i++));\n        var enc2 = keyStr.indexOf(input.charAt(i++));\n        var enc3 = keyStr.indexOf(input.charAt(i++));\n        var enc4 = keyStr.indexOf(input.charAt(i++));\n        var chr1 = enc1 << 2 | enc2 >>> 4;\n        var chr2 = (enc2 & 15) << 4 | enc3 >>> 2;\n        var chr3 = (enc3 & 3) << 6 | enc4;\n        output.push(chr1);\n        if (enc3 != 64) {\n          output.push(chr2);\n        }\n        if (enc4 != 64) {\n          output.push(chr3);\n        }\n      }\n      return output;\n    },\n    encode: function encode(bytes) {\n      var i = 0,\n        n = bytes.length;\n      var output = \"\";\n      while (i < n) {\n        var chr1 = bytes[i++];\n        var chr2 = bytes[i++];\n        var chr3 = bytes[i++];\n        var enc1 = chr1 >>> 2;\n        var enc2 = (chr1 & 3) << 4 | chr2 >>> 4;\n        var enc3 = (chr2 & 15) << 2 | chr3 >>> 6;\n        var enc4 = chr3 & 63;\n        if (i - n == 2) {\n          enc3 = enc4 = 64;\n        } else if (i - n == 1) {\n          enc4 = 64;\n        }\n        output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n      }\n      return output;\n    }\n  };\n}();\nfunction BinaryStream(data) {\n  var _offset = 0,\n    _length = 0;\n  if (data == null) {\n    data = HAS_TYPED_ARRAYS ? new Uint8Array(256) : [];\n  } else {\n    _length = data.length;\n  }\n  var ensure = HAS_TYPED_ARRAYS ? function (len) {\n    if (len >= data.length) {\n      var tmp = new Uint8Array(Math.max(len + 256, data.length * 2));\n      tmp.set(data, 0);\n      data = tmp;\n    }\n  } : function () {};\n  var get = HAS_TYPED_ARRAYS ? function () {\n    return new Uint8Array(data.buffer, 0, _length);\n  } : function () {\n    return data;\n  };\n  var write = HAS_TYPED_ARRAYS ? function (bytes) {\n    if (typeof bytes == \"string\") {\n      return writeString(bytes);\n    }\n    var len = bytes.length;\n    ensure(_offset + len);\n    data.set(bytes, _offset);\n    _offset += len;\n    if (_offset > _length) {\n      _length = _offset;\n    }\n  } : function (bytes) {\n    if (typeof bytes == \"string\") {\n      return writeString(bytes);\n    }\n    for (var i = 0; i < bytes.length; ++i) {\n      writeByte(bytes[i]);\n    }\n  };\n  var slice = HAS_TYPED_ARRAYS ? function (start, length) {\n    if (data.buffer.slice) {\n      return new Uint8Array(data.buffer.slice(start, start + length));\n    } else {\n      // IE10\n      var x = new Uint8Array(length);\n      x.set(new Uint8Array(data.buffer, start, length));\n      return x;\n    }\n  } : function (start, length) {\n    return data.slice(start, start + length);\n  };\n  function eof() {\n    return _offset >= _length;\n  }\n  function readByte() {\n    return _offset < _length ? data[_offset++] : 0;\n  }\n  function writeByte(b) {\n    ensure(_offset);\n    data[_offset++] = b & 0xFF;\n    if (_offset > _length) {\n      _length = _offset;\n    }\n  }\n  function readShort() {\n    return readByte() << 8 | readByte();\n  }\n  function writeShort(w) {\n    writeByte(w >> 8);\n    writeByte(w);\n  }\n  function readShort_() {\n    var w = readShort();\n    return w >= 0x8000 ? w - 0x10000 : w;\n  }\n  function writeShort_(w) {\n    writeShort(w < 0 ? w + 0x10000 : w);\n  }\n  function readLong() {\n    return readShort() * 0x10000 + readShort();\n  }\n  function writeLong(w) {\n    writeShort(w >>> 16 & 0xFFFF);\n    writeShort(w & 0xFFFF);\n  }\n  function readLong_() {\n    var w = readLong();\n    return w >= 0x80000000 ? w - 0x100000000 : w;\n  }\n  function writeLong_(w) {\n    writeLong(w < 0 ? w + 0x100000000 : w);\n  }\n  function readFixed() {\n    return readLong() / 0x10000;\n  }\n  function writeFixed(f) {\n    writeLong(Math.round(f * 0x10000));\n  }\n  function readFixed_() {\n    return readLong_() / 0x10000;\n  }\n  function writeFixed_(f) {\n    writeLong_(Math.round(f * 0x10000));\n  }\n  function read(len) {\n    return times(len, readByte);\n  }\n  function readString(len) {\n    return String.fromCharCode.apply(String, read(len));\n  }\n  function writeString(str) {\n    for (var i = 0; i < str.length; ++i) {\n      writeByte(str.charCodeAt(i));\n    }\n  }\n  function times(n, reader) {\n    for (var ret = new Array(n), i = 0; i < n; ++i) {\n      ret[i] = reader();\n    }\n    return ret;\n  }\n  var stream = {\n    eof: eof,\n    readByte: readByte,\n    writeByte: writeByte,\n    readShort: readShort,\n    writeShort: writeShort,\n    readLong: readLong,\n    writeLong: writeLong,\n    readFixed: readFixed,\n    writeFixed: writeFixed,\n    // signed numbers.\n    readShort_: readShort_,\n    writeShort_: writeShort_,\n    readLong_: readLong_,\n    writeLong_: writeLong_,\n    readFixed_: readFixed_,\n    writeFixed_: writeFixed_,\n    read: read,\n    write: write,\n    readString: readString,\n    writeString: writeString,\n    times: times,\n    get: get,\n    slice: slice,\n    offset: function offset(pos) {\n      if (pos != null) {\n        _offset = pos;\n        return stream;\n      }\n      return _offset;\n    },\n    skip: function skip(nbytes) {\n      _offset += nbytes;\n    },\n    toString: function toString() {\n      throw new Error(\"FIX CALLER.  BinaryStream is no longer convertible to string!\");\n    },\n    length: function length() {\n      return _length;\n    },\n    saveExcursion: function saveExcursion(f) {\n      var pos = _offset;\n      try {\n        return f();\n      } finally {\n        _offset = pos;\n      }\n    },\n    writeBase64: function writeBase64(base64) {\n      if (window.atob) {\n        writeString(window.atob(base64));\n      } else {\n        write(BASE64.decode(base64));\n      }\n    },\n    base64: function base64() {\n      return BASE64.encode(get());\n    }\n  };\n  return stream;\n}\nfunction ucs2decode(string) {\n  var output = [],\n    counter = 0,\n    length = string.length,\n    value,\n    extra;\n  while (counter < length) {\n    value = string.charCodeAt(counter++);\n    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n      // high surrogate, and there is a next character\n      extra = string.charCodeAt(counter++);\n      if ((extra & 0xFC00) == 0xDC00) {\n        // low surrogate\n        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n      } else {\n        // unmatched surrogate; only append this code unit, in case the next\n        // code unit is the high surrogate of a surrogate pair\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n  return output;\n}\nfunction ucs2encode(array) {\n  return array.map(function (value) {\n    var output = \"\";\n    if (value > 0xFFFF) {\n      value -= 0x10000;\n      output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);\n      value = 0xDC00 | value & 0x3FF;\n    }\n    output += String.fromCharCode(value);\n    return output;\n  }).join(\"\");\n}\nfunction atobUint8Array(base64) {\n  var data = window.atob(base64);\n  var result = new Uint8Array(data.length);\n  for (var idx = 0; idx < data.length; idx++) {\n    result[idx] = data.charCodeAt(idx);\n  }\n  return result;\n}\nfunction createUint8Array(data) {\n  var result = new Uint8Array(data.length);\n  for (var idx = 0; idx < data.length; idx++) {\n    result[idx] = data[idx];\n  }\n  return result;\n}\nfunction base64ToUint8Array(base64) {\n  if (window.atob) {\n    return atobUint8Array(base64);\n  }\n  return createUint8Array(BASE64.decode(base64));\n}\nexport { HAS_TYPED_ARRAYS, BASE64, BinaryStream, ucs2decode, ucs2encode, base64ToUint8Array };","map":null,"metadata":{},"sourceType":"module"}