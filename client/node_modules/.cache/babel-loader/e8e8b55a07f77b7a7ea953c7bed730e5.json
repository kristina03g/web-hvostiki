{"ast":null,"code":"import getField from './utils/get-field';\nimport { VALUE } from '../common/constants';\nimport { Class, defined } from '../common';\nvar SeriesBinder = function (Class) {\n  function SeriesBinder() {\n    Class.call(this);\n    this._valueFields = {};\n    this._otherFields = {};\n    this._nullValue = {};\n    this._undefinedValue = {};\n  }\n  if (Class) SeriesBinder.__proto__ = Class;\n  SeriesBinder.prototype = Object.create(Class && Class.prototype);\n  SeriesBinder.prototype.constructor = SeriesBinder;\n  SeriesBinder.prototype.register = function register(seriesTypes, valueFields, otherFields) {\n    var this$1 = this;\n    if (valueFields === void 0) valueFields = [VALUE];\n    if (otherFields === void 0) otherFields = {};\n    for (var i = 0; i < seriesTypes.length; i++) {\n      var type = seriesTypes[i];\n      this$1._valueFields[type] = valueFields;\n      this$1._otherFields[type] = otherFields;\n      this$1._nullValue[type] = this$1._makeValue(valueFields, null);\n      this$1._undefinedValue[type] = this$1._makeValue(valueFields, undefined);\n    }\n  };\n  SeriesBinder.prototype.canonicalFields = function canonicalFields(series) {\n    return this.valueFields(series).concat(this.otherFields(series));\n  };\n  SeriesBinder.prototype.valueFields = function valueFields(series) {\n    return this._valueFields[series.type] || [VALUE];\n  };\n  SeriesBinder.prototype.otherFields = function otherFields(series) {\n    return this._otherFields[series.type] || [VALUE];\n  };\n  SeriesBinder.prototype.bindPoint = function bindPoint(series, pointIx, item) {\n    var data = series.data;\n    var pointData = defined(item) ? item : data[pointIx];\n    var result = {\n      valueFields: {\n        value: pointData\n      }\n    };\n    var valueFields = this.valueFields(series);\n    var otherFields = this._otherFields[series.type];\n    var fields, value;\n    if (pointData === null) {\n      value = this._nullValue[series.type];\n    } else if (!defined(pointData)) {\n      value = this._undefinedValue[series.type];\n    } else if (Array.isArray(pointData)) {\n      var fieldData = pointData.slice(valueFields.length);\n      value = this._bindFromArray(pointData, valueFields);\n      fields = this._bindFromArray(fieldData, otherFields);\n    } else if (typeof pointData === \"object\") {\n      var srcValueFields = this.sourceFields(series, valueFields);\n      var srcPointFields = this.sourceFields(series, otherFields);\n      value = this._bindFromObject(pointData, valueFields, srcValueFields);\n      fields = this._bindFromObject(pointData, otherFields, srcPointFields);\n    }\n    if (defined(value)) {\n      if (valueFields.length === 1) {\n        result.valueFields.value = value[valueFields[0]];\n      } else {\n        result.valueFields = value;\n      }\n    }\n    result.fields = fields || {};\n    return result;\n  };\n  SeriesBinder.prototype._makeValue = function _makeValue(fields, initialValue) {\n    var value = {};\n    var length = fields.length;\n    for (var i = 0; i < length; i++) {\n      var fieldName = fields[i];\n      value[fieldName] = initialValue;\n    }\n    return value;\n  };\n  SeriesBinder.prototype._bindFromArray = function _bindFromArray(array, fields) {\n    var value = {};\n    if (fields) {\n      var length = Math.min(fields.length, array.length);\n      for (var i = 0; i < length; i++) {\n        value[fields[i]] = array[i];\n      }\n    }\n    return value;\n  };\n  SeriesBinder.prototype._bindFromObject = function _bindFromObject(object, fields, srcFields) {\n    if (srcFields === void 0) srcFields = fields;\n    var value = {};\n    if (fields) {\n      var length = fields.length;\n      for (var i = 0; i < length; i++) {\n        var fieldName = fields[i];\n        var srcFieldName = srcFields[i];\n        if (srcFieldName !== null) {\n          value[fieldName] = getField(srcFieldName, object);\n        }\n      }\n    }\n    return value;\n  };\n  SeriesBinder.prototype.sourceFields = function sourceFields(series, canonicalFields) {\n    var sourceFields = [];\n    if (canonicalFields) {\n      var length = canonicalFields.length;\n      for (var i = 0; i < length; i++) {\n        var fieldName = canonicalFields[i];\n        var sourceFieldName = fieldName === VALUE ? \"field\" : fieldName + \"Field\";\n        sourceFields.push(series[sourceFieldName] !== null ? series[sourceFieldName] || fieldName : null);\n      }\n    }\n    return sourceFields;\n  };\n  return SeriesBinder;\n}(Class);\nSeriesBinder.current = new SeriesBinder();\nexport default SeriesBinder;","map":null,"metadata":{},"sourceType":"module"}