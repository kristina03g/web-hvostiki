{"ast":null,"code":"import { geometry as g, throttle } from '@progress/kendo-drawing';\nimport { Class, deepExtend, round, limitValue, hashKey, setDefaultOptions, isFunction } from '../../common';\nimport { removeChildren } from '../utils';\nimport { Layer } from './layer';\nimport TemplateService from '../../services/template-service';\nvar math = Math,\n  Point = g.Point;\nfunction compileTemplate(template) {\n  if (isFunction(template)) {\n    return template;\n  }\n  return TemplateService.compile(template);\n}\nfunction roundPoint(point) {\n  return new Point(round(point.x), round(point.y));\n}\nfunction renderSize(size) {\n  var newSize = size;\n  if (typeof size !== \"string\") {\n    newSize += \"px\";\n  }\n  return newSize;\n}\nexport var TileLayer = function (Layer) {\n  function TileLayer(map, options) {\n    Layer.call(this, map, options);\n    if (typeof this.options.subdomains === 'string') {\n      this.options.subdomains = this.options.subdomains.split('');\n    }\n    var viewType = this._viewType();\n    this._view = new viewType(this.element, this.options);\n  }\n  if (Layer) TileLayer.__proto__ = Layer;\n  TileLayer.prototype = Object.create(Layer && Layer.prototype);\n  TileLayer.prototype.constructor = TileLayer;\n  TileLayer.prototype.destroy = function destroy() {\n    Layer.prototype.destroy.call(this);\n    this._view.destroy();\n    this._view = null;\n  };\n  TileLayer.prototype._beforeReset = function _beforeReset() {\n    var map = this.map;\n    var origin = map.locationToLayer(map.extent().nw).round();\n    this._view.viewOrigin(origin);\n  };\n  TileLayer.prototype._reset = function _reset() {\n    Layer.prototype._reset.call(this);\n    this._updateView();\n    this._view.reset();\n  };\n  TileLayer.prototype._viewType = function _viewType() {\n    return TileView;\n  };\n  TileLayer.prototype._activate = function _activate() {\n    Layer.prototype._activate.call(this);\n    if (!this.support.mobileOS) {\n      if (!this._pan) {\n        this._pan = throttle(this._render.bind(this), 100);\n      }\n      this.map.bind('pan', this._pan);\n    }\n  };\n  TileLayer.prototype._deactivate = function _deactivate() {\n    Layer.prototype._deactivate.call(this);\n    if (this._pan) {\n      this.map.unbind('pan', this._pan);\n    }\n  };\n  TileLayer.prototype._updateView = function _updateView() {\n    var view = this._view,\n      map = this.map,\n      extent = map.extent(),\n      extentToPoint = {\n        nw: map.locationToLayer(extent.nw).round(),\n        se: map.locationToLayer(extent.se).round()\n      };\n    view.center(map.locationToLayer(map.center()));\n    view.extent(extentToPoint);\n    view.zoom(map.zoom());\n  };\n  TileLayer.prototype._resize = function _resize() {\n    this._render();\n  };\n  TileLayer.prototype._panEnd = function _panEnd(e) {\n    Layer.prototype._panEnd.call(this, e);\n    this._render();\n  };\n  TileLayer.prototype._render = function _render() {\n    this._updateView();\n    this._view.render();\n  };\n  return TileLayer;\n}(Layer);\nsetDefaultOptions(TileLayer, {\n  tileSize: 256,\n  subdomains: ['a', 'b', 'c'],\n  urlTemplate: '',\n  zIndex: 1\n});\nexport var TileView = function (Class) {\n  function TileView(element, options) {\n    Class.call(this);\n    this.element = element;\n    this._initOptions(options);\n    this.pool = new TilePool();\n  }\n  if (Class) TileView.__proto__ = Class;\n  TileView.prototype = Object.create(Class && Class.prototype);\n  TileView.prototype.constructor = TileView;\n  TileView.prototype._initOptions = function _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  };\n  TileView.prototype.center = function center(center$1) {\n    this._center = center$1;\n  };\n  TileView.prototype.extent = function extent(extent$1) {\n    this._extent = extent$1;\n  };\n  TileView.prototype.viewOrigin = function viewOrigin(origin) {\n    this._viewOrigin = origin;\n  };\n  TileView.prototype.zoom = function zoom(zoom$1) {\n    this._zoom = zoom$1;\n  };\n  TileView.prototype.pointToTileIndex = function pointToTileIndex(point) {\n    return new Point(math.floor(point.x / this.options.tileSize), math.floor(point.y / this.options.tileSize));\n  };\n  TileView.prototype.tileCount = function tileCount() {\n    var size = this.size(),\n      firstTileIndex = this.pointToTileIndex(this._extent.nw),\n      nw = this._extent.nw,\n      point = this.indexToPoint(firstTileIndex).translate(-nw.x, -nw.y);\n    return {\n      x: math.ceil((math.abs(point.x) + size.width) / this.options.tileSize),\n      y: math.ceil((math.abs(point.y) + size.height) / this.options.tileSize)\n    };\n  };\n  TileView.prototype.size = function size() {\n    var nw = this._extent.nw,\n      se = this._extent.se,\n      diff = se.clone().translate(-nw.x, -nw.y);\n    return {\n      width: diff.x,\n      height: diff.y\n    };\n  };\n  TileView.prototype.indexToPoint = function indexToPoint(index) {\n    var x = index.x,\n      y = index.y;\n    return new Point(x * this.options.tileSize, y * this.options.tileSize);\n  };\n  TileView.prototype.subdomainText = function subdomainText() {\n    var subdomains = this.options.subdomains;\n    return subdomains[this.subdomainIndex++ % subdomains.length];\n  };\n  TileView.prototype.destroy = function destroy() {\n    removeChildren(this.element);\n    this.pool.empty();\n  };\n  TileView.prototype.reset = function reset() {\n    this.pool.reset();\n    this.subdomainIndex = 0;\n    this.render();\n  };\n  TileView.prototype.render = function render() {\n    var this$1 = this;\n    var size = this.tileCount(),\n      firstTileIndex = this.pointToTileIndex(this._extent.nw),\n      tile,\n      x,\n      y;\n    for (x = 0; x < size.x; x++) {\n      for (y = 0; y < size.y; y++) {\n        tile = this$1.createTile({\n          x: firstTileIndex.x + x,\n          y: firstTileIndex.y + y\n        });\n        if (!tile.visible) {\n          tile.show();\n        }\n      }\n    }\n  };\n  TileView.prototype.createTile = function createTile(currentIndex) {\n    var options = this.tileOptions(currentIndex);\n    var tile = this.pool.get(this._center, options);\n    if (!tile.element.parentNode) {\n      this.element.append(tile.element);\n    }\n    return tile;\n  };\n  TileView.prototype.tileOptions = function tileOptions(currentIndex) {\n    var index = this.wrapIndex(currentIndex),\n      point = this.indexToPoint(currentIndex),\n      origin = this._viewOrigin,\n      offset = point.clone().translate(-origin.x, -origin.y);\n    return {\n      index: index,\n      currentIndex: currentIndex,\n      point: point,\n      offset: roundPoint(offset),\n      zoom: this._zoom,\n      size: this.options.tileSize,\n      subdomain: this.subdomainText(),\n      urlTemplate: this.options.urlTemplate,\n      errorUrlTemplate: this.options.errorUrlTemplate\n    };\n  };\n  TileView.prototype.wrapIndex = function wrapIndex(index) {\n    var boundary = math.pow(2, this._zoom);\n    return {\n      x: this.wrapValue(index.x, boundary),\n      y: limitValue(index.y, 0, boundary - 1)\n    };\n  };\n  TileView.prototype.wrapValue = function wrapValue(value, boundary) {\n    var remainder = math.abs(value) % boundary;\n    var wrappedValue = value;\n    if (value >= 0) {\n      wrappedValue = remainder;\n    } else {\n      wrappedValue = boundary - (remainder === 0 ? boundary : remainder);\n    }\n    return wrappedValue;\n  };\n  return TileView;\n}(Class);\nexport var ImageTile = function (Class) {\n  function ImageTile(id, options) {\n    Class.call(this);\n    this.id = id;\n    this.visible = true;\n    this._initOptions(options);\n    this.createElement();\n    this.show();\n  }\n  if (Class) ImageTile.__proto__ = Class;\n  ImageTile.prototype = Object.create(Class && Class.prototype);\n  ImageTile.prototype.constructor = ImageTile;\n  ImageTile.prototype.destroy = function destroy() {\n    var element = this.element;\n    var parentNode = element ? element.parentNode : null;\n    if (element) {\n      if (parentNode) {\n        parentNode.removeChild(element);\n      }\n      this.element = null;\n    }\n  };\n  ImageTile.prototype._initOptions = function _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  };\n  ImageTile.prototype.createElement = function createElement() {\n    var el = document.createElement(\"img\");\n    var size = this.options.size + \"px\";\n    el.style.position = \"absolute\";\n    el.style.display = \"block\";\n    el.style.width = el.style.maxWidth = size;\n    el.style.height = el.style.maxHeight = size;\n    this.element = el;\n\n    // todo\n    // add on error handler\n\n    // this.element =\n    // $('<img style=\\'position: absolute; display: block;\\' alt=\\'\\' />')\n    // .css({\n    //     width: this.options.size,\n    //     height: this.options.size\n    // })\n    // .on('error', proxy(function(e) {\n    //     if (this.errorUrl()) {\n    //         e.target.setAttribute('src', this.errorUrl());\n    //     } else {\n    //         e.target.removeAttribute('src');\n    //     }\n    // }, this));\n  };\n\n  ImageTile.prototype.show = function show() {\n    var element = this.element;\n    element.style.top = renderSize(this.options.offset.y);\n    element.style.left = renderSize(this.options.offset.x);\n    var url = this.url();\n    if (url) {\n      element.setAttribute('src', url);\n    }\n    element.style.visibility = 'visible';\n    this.visible = true;\n  };\n  ImageTile.prototype.hide = function hide() {\n    this.element.style.visibility = 'hidden';\n    this.visible = false;\n  };\n  ImageTile.prototype.url = function url() {\n    var urlResult = compileTemplate(this.options.urlTemplate);\n    return urlResult(this.urlOptions());\n  };\n  ImageTile.prototype.errorUrl = function errorUrl() {\n    var urlResult = compileTemplate(this.options.errorUrlTemplate);\n    return urlResult(this.urlOptions());\n  };\n  ImageTile.prototype.urlOptions = function urlOptions() {\n    var options = this.options;\n    return {\n      zoom: options.zoom,\n      subdomain: options.subdomain,\n      z: options.zoom,\n      x: options.index.x,\n      y: options.index.y,\n      s: options.subdomain,\n      quadkey: options.quadkey,\n      q: options.quadkey,\n      culture: options.culture,\n      c: options.culture\n    };\n  };\n  return ImageTile;\n}(Class);\nsetDefaultOptions(ImageTile, {\n  urlTemplate: '',\n  errorUrlTemplate: ''\n});\nexport var TilePool = function (Class) {\n  function TilePool() {\n    Class.call(this);\n    this._items = [];\n  }\n  if (Class) TilePool.__proto__ = Class;\n  TilePool.prototype = Object.create(Class && Class.prototype);\n  TilePool.prototype.constructor = TilePool;\n  TilePool.prototype.get = function get(center, options) {\n    if (this._items.length >= this.options.maxSize) {\n      this._remove(center);\n    }\n    return this._create(options);\n  };\n  TilePool.prototype.empty = function empty() {\n    var items = this._items;\n    for (var i = 0; i < items.length; i++) {\n      items[i].destroy();\n    }\n    this._items = [];\n  };\n  TilePool.prototype.reset = function reset() {\n    var items = this._items;\n    for (var i = 0; i < items.length; i++) {\n      items[i].hide();\n    }\n  };\n  TilePool.prototype._create = function _create(options) {\n    var items = this._items;\n    var tile;\n    var id = hashKey(options.point.toString() + options.offset.toString() + options.zoom + options.urlTemplate);\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].id === id) {\n        tile = items[i];\n        break;\n      }\n    }\n    if (tile) {\n      tile.show();\n    } else {\n      tile = new ImageTile(id, options);\n      this._items.push(tile);\n    }\n    return tile;\n  };\n  TilePool.prototype._remove = function _remove(center) {\n    var items = this._items;\n    var maxDist = -1;\n    var index = -1;\n    for (var i = 0; i < items.length; i++) {\n      var dist = items[i].options.point.distanceTo(center);\n      if (dist > maxDist && !items[i].visible) {\n        index = i;\n        maxDist = dist;\n      }\n    }\n    if (index !== -1) {\n      items[index].destroy();\n      items.splice(index, 1);\n    }\n  };\n  return TilePool;\n}(Class);\nsetDefaultOptions(TilePool, {\n  maxSize: 100\n});","map":null,"metadata":{},"sourceType":"module"}