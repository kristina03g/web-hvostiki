{"ast":null,"code":"import * as React from 'react';\nimport { useDroppable } from './hooks';\n/**\n * Represents the KendoReact Droppable component.\n *\n * Accepts properties of type [DroppableProps]({% slug api_common_droppableprops %}),\n * and returns an object of type [DroppableHandle]({% slug api_common_droppablehandle %}) when the `ref` is obtained.\n */\nexport var Droppable = React.forwardRef(function (props, ref) {\n  var childRef = React.useRef(null);\n  var target = React.useRef(null);\n  var getElement = React.useCallback(function () {\n    return childRef.current && childRef.current.element ? childRef.current.element : childRef.current;\n  }, [childRef]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: getElement() || undefined\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  React.useImperativeHandle(props.childRef, function () {\n    return childRef.current;\n  });\n  var handleDragEnter = React.useCallback(function (event) {\n    if (!props.onDragEnter) {\n      return;\n    }\n    props.onDragEnter({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [props.onDragEnter, getElement]);\n  var handleDragOver = React.useCallback(function (event) {\n    if (!props.onDragOver) {\n      return;\n    }\n    props.onDragOver({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [getElement, props.onDragOver]);\n  var handleDragLeave = React.useCallback(function (event) {\n    if (!props.onDragLeave) {\n      return;\n    }\n    props.onDragLeave({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [props.onDragLeave, getElement]);\n  var handleDrop = React.useCallback(function (event) {\n    if (!props.onDrop) {\n      return;\n    }\n    props.onDrop({\n      element: getElement(),\n      target: target.current,\n      event: event\n    });\n  }, [props.onDrop, getElement]);\n  useDroppable(childRef, {\n    onDragEnter: handleDragEnter,\n    onDragOver: handleDragOver,\n    onDragLeave: handleDragLeave,\n    onDrop: handleDrop\n  });\n  return props.children ? React.cloneElement(React.Children.only(props.children), {\n    ref: childRef\n  }) : null;\n});\nDroppable.displayName = 'KendoReactDroppable';","map":null,"metadata":{},"sourceType":"module"}