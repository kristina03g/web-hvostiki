{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { FONT_SIZE_CLASSES, FONT_WEIGHT_CLASSES, MARGIN_ENUM_CLASSES, MARGIN_ENUM_VALUES, MARGIN_SIDES_CLASSES, TEXT_ALIGN_CLASSES, TEXT_TRANSFORM_CLASSES, THEME_COLOR_CLASSES } from './constants';\n/**\n * @hidden\n */\nvar generateTypography = function generateTypography(element) {\n  var component = React.forwardRef(function (props, ref) {\n    var id = props.id,\n      style = props.style,\n      className = props.className,\n      fontSize = props.fontSize,\n      fontWeight = props.fontWeight,\n      textAlign = props.textAlign,\n      textTransform = props.textTransform,\n      themeColor = props.themeColor,\n      margin = props.margin,\n      others = __rest(props, [\"id\", \"style\", \"className\", \"fontSize\", \"fontWeight\", \"textAlign\", \"textTransform\", \"themeColor\", \"margin\"]);\n    var target = React.useRef(null);\n    var elementRef = React.useRef(null);\n    React.useImperativeHandle(target, function () {\n      return {\n        element: elementRef.current,\n        props: props\n      };\n    });\n    React.useImperativeHandle(ref, function () {\n      return target.current;\n    });\n    var defaultClass = function defaultClass() {\n      var classMap = element === 'p' ? 'paragraph' : element;\n      return \"k-\".concat(classMap);\n    };\n    var Component = element;\n    var setMarginClassPerSide = function setMarginClassPerSide(marginSide, value) {\n      var val = typeof value === 'string' ? MARGIN_ENUM_VALUES[value] : value;\n      return \"\".concat(MARGIN_SIDES_CLASSES[marginSide]).concat(val);\n    };\n    var setMarginClasses = function setMarginClasses() {\n      if (margin === undefined) {\n        return;\n      }\n      if (typeof margin === 'string') {\n        return [MARGIN_ENUM_CLASSES[margin]];\n      }\n      // The the predefined Kendo classes are starting from 0 to 24.\n      if (typeof margin === 'number' && margin >= 0 && margin <= 24) {\n        return [\"k-m-\".concat(margin)];\n      }\n      if (typeof margin === 'object') {\n        var marginClassesList_1 = [];\n        Object.keys(margin).forEach(function (key) {\n          if (margin[key] !== null && margin[key] !== undefined) {\n            marginClassesList_1.push(setMarginClassPerSide(key, margin[key]));\n          }\n        });\n        var classes = marginClassesList_1.join(' ');\n        return classes;\n      }\n    };\n    var setTypographyClasses = function setTypographyClasses() {\n      var typographyArray = [defaultClass(), FONT_SIZE_CLASSES[fontSize], FONT_WEIGHT_CLASSES[fontWeight], TEXT_ALIGN_CLASSES[textAlign], TEXT_TRANSFORM_CLASSES[textTransform], THEME_COLOR_CLASSES[themeColor], setMarginClasses(), className];\n      var typographyClasses = typographyArray.filter(function (n) {\n        return n !== undefined;\n      }).join(' ');\n      return typographyClasses;\n    };\n    return React.createElement(Component, __assign({\n      id: id,\n      ref: elementRef,\n      className: setTypographyClasses(),\n      style: style\n    }, others), props.children);\n  });\n  component.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    fontSize: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']),\n    fontWeight: PropTypes.oneOf(['light', 'normal', 'bold']),\n    margin: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'thin', 'hair'])]),\n    textAlign: PropTypes.oneOf(['left', 'right', 'center', 'justify']),\n    textTransform: PropTypes.oneOf(['lowercase', 'uppercase', 'capitalize']),\n    themeColor: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'tertiary', 'info', 'success', 'error', 'warning', 'dark', 'light', 'inverse'])\n  };\n  component.displayName = \"KendoReactTypography\".concat(element.toUpperCase());\n  return component;\n};\n/**\n * Represents [KendoReact Typography Heading1 component]({% slug overview_typography %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.h1>Heading 1</Typography.h1>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar h1 = generateTypography('h1');\n/**\n * Represents [KendoReact Typography Heading2 component]({% slug overview_typography %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.h2>Heading 2</Typography.h2>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar h2 = generateTypography('h2');\n/**\n * Represents [KendoReact Typography Heading3 component]({% slug overview_typography %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.h3>Heading 3</Typography.h3>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar h3 = generateTypography('h3');\n/**\n * Represents [KendoReact Typography Heading4 component]({% slug overview_typography %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.h4>Heading 4</Typography.h4>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar h4 = generateTypography('h4');\n/**\n * Represents [KendoReact Typography Heading5 component]({% slug overview_typography %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.h5>Heading 5</Typography.h5>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar h5 = generateTypography('h5');\n/**\n * Represents [KendoReact Typography Heading6 component]({% slug overview_typography %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.h6>Heading 6</Typography.h6>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar h6 = generateTypography('h6');\n/**\n * Represents [KendoReact Typography Paragraph component]({% slug overview_typography %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.p>I'm a paragraph text.</Typography.p>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar p = generateTypography('p');\n/**\n * Represents [KendoReact Typography Code component]({% slug overview_typography %}).\n * Use to create a single-line code snippet.\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.code>code</Typography.code>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar code = generateTypography('code');\n/**\n * Represents [KendoReact Typography Pre component]({% slug overview_typography %}).\n * Used along with [KendoReact Typography Code component]({% slug overview_typography %}) to create multi-line code snippet.\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *     <Typography.pre>\n *       <Typography.code dangerouslySetInnerHTML={{__html: `\n *         const handleChange = ({ target }) => {\n *           const { name, value } = target;\n *           const newData = Object.assign({}, data, { [name]: value });\n *           setData(newData);\n *         }\n *       `}} />\n *     </Typography.pre>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar pre = generateTypography('pre');\n/**\n * Represents the [KendoReact Typography component]({% slug overview_typography %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Typography.h2>Heading 2</Typography.h2>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport var Typography = {\n  h1: h1,\n  h2: h2,\n  h3: h3,\n  h4: h4,\n  h5: h5,\n  h6: h6,\n  p: p,\n  code: code,\n  pre: pre\n};","map":null,"metadata":{},"sourceType":"module"}