{"ast":null,"code":"import HasObservers from '../core/has-observers';\nimport toMatrix from './to-matrix';\nimport Matrix from './matrix';\nimport Point from './point';\nvar Transformation = function (HasObservers) {\n  function Transformation(matrix) {\n    if (matrix === void 0) matrix = Matrix.unit();\n    HasObservers.call(this);\n    this._matrix = matrix;\n  }\n  if (HasObservers) Transformation.__proto__ = HasObservers;\n  Transformation.prototype = Object.create(HasObservers && HasObservers.prototype);\n  Transformation.prototype.constructor = Transformation;\n  Transformation.prototype.clone = function clone() {\n    return new Transformation(this._matrix.clone());\n  };\n  Transformation.prototype.equals = function equals(other) {\n    return other && other._matrix.equals(this._matrix);\n  };\n  Transformation.prototype.translate = function translate(x, y) {\n    this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));\n    this._optionsChange();\n    return this;\n  };\n  Transformation.prototype.scale = function scale(scaleX, scaleY, origin) {\n    if (scaleY === void 0) scaleY = scaleX;\n    if (origin === void 0) origin = null;\n    var originPoint = origin;\n    if (originPoint) {\n      originPoint = Point.create(originPoint);\n      this._matrix = this._matrix.multiplyCopy(Matrix.translate(originPoint.x, originPoint.y));\n    }\n    this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));\n    if (originPoint) {\n      this._matrix = this._matrix.multiplyCopy(Matrix.translate(-originPoint.x, -originPoint.y));\n    }\n    this._optionsChange();\n    return this;\n  };\n  Transformation.prototype.rotate = function rotate(angle, origin) {\n    var originPoint = Point.create(origin) || Point.ZERO;\n    this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, originPoint.x, originPoint.y));\n    this._optionsChange();\n    return this;\n  };\n  Transformation.prototype.multiply = function multiply(transformation) {\n    var matrix = toMatrix(transformation);\n    this._matrix = this._matrix.multiplyCopy(matrix);\n    this._optionsChange();\n    return this;\n  };\n  Transformation.prototype.matrix = function matrix(value) {\n    if (value) {\n      this._matrix = value;\n      this._optionsChange();\n      return this;\n    }\n    return this._matrix;\n  };\n  Transformation.prototype._optionsChange = function _optionsChange() {\n    this.optionsChange({\n      field: \"transform\",\n      value: this\n    });\n  };\n  return Transformation;\n}(HasObservers);\nexport default Transformation;","map":null,"metadata":{},"sourceType":"module"}