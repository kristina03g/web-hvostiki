{"ast":null,"code":"import Point from '../geometry/point';\nimport ShapeMap from './shape-map';\nvar SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi;\nvar SPLIT_REGEX = /[,\\s]?([+\\-]?(?:\\d*\\.\\d+|\\d+)(?:[eE][+\\-]?\\d+)?)/g;\nvar MOVE = \"m\";\nvar CLOSE = \"z\";\nfunction parseParameters(str) {\n  var parameters = [];\n  str.replace(SPLIT_REGEX, function (match, number) {\n    parameters.push(parseFloat(number));\n  });\n  return parameters;\n}\nfunction parsePath(pathInstance, str) {\n  var position = new Point();\n  var previousCommand;\n  str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {\n    var command = element.toLowerCase();\n    var isRelative = command === element;\n    var parameters = parseParameters(params.trim());\n    if (command === MOVE) {\n      if (isRelative) {\n        position.x += parameters[0];\n        position.y += parameters[1];\n      } else {\n        position.x = parameters[0];\n        position.y = parameters[1];\n      }\n      pathInstance.moveTo(position.x, position.y);\n      if (parameters.length > 2) {\n        command = \"l\";\n        parameters.splice(0, 2);\n      }\n    }\n    if (ShapeMap[command]) {\n      ShapeMap[command](pathInstance, {\n        parameters: parameters,\n        position: position,\n        isRelative: isRelative,\n        previousCommand: previousCommand\n      });\n      if (closePath && closePath.toLowerCase() === CLOSE) {\n        pathInstance.close();\n      }\n    } else if (command !== MOVE) {\n      throw new Error(\"Error while parsing SVG path. Unsupported command: \" + command);\n    }\n    previousCommand = command;\n  });\n  return pathInstance;\n}\nexport default parsePath;","map":null,"metadata":{},"sourceType":"module"}