{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { InstanceObserver } from '@progress/kendo-charts';\nimport { TooltipPopup } from './Popup';\nimport { ChartContext } from '../ChartContext';\nvar CROSSHAIR_TOOLTIP_CLASS = 'k-chart-crosshair-tooltip';\nvar INVERSE_TOOLTIP_CLASS = 'k-chart-tooltip-inverse';\n/**\n * @hidden\n */\nvar CrosshairTooltip = /** @class */function (_super) {\n  __extends(CrosshairTooltip, _super);\n  function CrosshairTooltip(props, context) {\n    var _this = _super.call(this, props, context) || this;\n    _this.context = null;\n    _this.state = {\n      popupShown: false\n    };\n    _this.chartObserver = new InstanceObserver(_this, {\n      showTooltip: 'onShowTooltip',\n      hideTooltip: 'onHideTooltip'\n    });\n    context.observersStore.dispatch({\n      type: 'add',\n      payload: _this.chartObserver\n    });\n    return _this;\n  }\n  CrosshairTooltip.prototype.render = function () {\n    var _a;\n    var _b = this.state,\n      popupContend = _b.popupContend,\n      className = _b.className,\n      tooltipProps = __rest(_b, [\"popupContend\", \"className\"]);\n    var tooltipContent = this.state.popupShown ? function () {\n      return popupContend;\n    } : Function.prototype;\n    var popupContainerClassName = classNames((_a = {}, _a[CROSSHAIR_TOOLTIP_CLASS] = true, _a[INVERSE_TOOLTIP_CLASS] = !!className, _a));\n    return React.createElement(TooltipPopup, __assign({}, tooltipProps, {\n      popupContent: tooltipContent,\n      className: popupContainerClassName\n    }));\n  };\n  CrosshairTooltip.prototype.componentWillUnmount = function () {\n    var _a;\n    (_a = this.context) === null || _a === void 0 ? void 0 : _a.observersStore.dispatch({\n      type: 'remove',\n      payload: this.chartObserver\n    });\n  };\n  CrosshairTooltip.prototype.onShowTooltip = function (e) {\n    var anchor = e.anchor,\n      style = e.style,\n      className = e.className,\n      crosshair = e.crosshair,\n      axisName = e.axisName,\n      axisIndex = e.axisIndex,\n      value = e.value;\n    var _a = this.props,\n      name = _a.name,\n      index = _a.index;\n    if (!crosshair) {\n      return;\n    }\n    if (axisName === name && axisIndex === index) {\n      this.setState({\n        popupShown: true,\n        popupAlign: anchor.align,\n        popupOffset: anchor.point,\n        popupContend: value,\n        popupStyles: style,\n        className: className\n      });\n    }\n  };\n  CrosshairTooltip.prototype.onHideTooltip = function () {\n    this.setState({\n      popupShown: false,\n      popupStyles: {},\n      className: undefined\n    });\n  };\n  CrosshairTooltip.contextType = ChartContext;\n  return CrosshairTooltip;\n}(React.Component);\nexport { CrosshairTooltip };","map":null,"metadata":{},"sourceType":"module"}