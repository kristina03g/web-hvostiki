{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString, splitInto } from '../../utils';\nexport var NumericQRDataMode = function (QRDataMode) {\n  function NumericQRDataMode() {\n    QRDataMode.apply(this, arguments);\n  }\n  if (QRDataMode) NumericQRDataMode.__proto__ = QRDataMode;\n  NumericQRDataMode.prototype = Object.create(QRDataMode && QRDataMode.prototype);\n  NumericQRDataMode.prototype.constructor = NumericQRDataMode;\n  NumericQRDataMode.prototype.initProperties = function initProperties() {\n    QRDataMode.prototype.initProperties.call(this);\n    extend(this, {\n      bitsInCharacterCount: [10, 12, 14],\n      modeIndicator: \"0001\"\n    });\n  };\n  NumericQRDataMode.prototype.getValue = function getValue(character) {\n    return parseInt(character, 10);\n  };\n  NumericQRDataMode.prototype.encode = function encode(str, version) {\n    var mode = this,\n      parts = splitInto(str, 3),\n      result = mode.getModeCountString(str.length, version);\n    var i;\n    for (i = 0; i < parts.length - 1; i++) {\n      result += toBitsString(parts[i], 10);\n    }\n    return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n  };\n  NumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength(inputLength, version) {\n    var mod3 = inputLength % 3;\n    return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n  };\n  return NumericQRDataMode;\n}(QRDataMode);","map":null,"metadata":{},"sourceType":"module"}