{"ast":null,"code":"/* eslint-disable arrow-body-style */\nimport addScroll from \"./add-scroll\";\nimport align from './align';\nimport boundingOffset from './bounding-offset';\nimport utils from './utils';\nimport removeScroll from './remove-scroll';\nimport restrictToView from './restrict-to-view';\nimport scrollPosition from './scroll-position';\nimport offsetBase from './offset';\nimport positionWithScroll from './position-with-scroll';\nimport windowViewPort from './window-viewport';\nimport siblingContainer from './sibling-container';\nimport parents from './parents';\nvar STYLES = ['font-size', 'font-family', 'font-stretch', 'font-style', 'font-weight', 'line-height'];\nvar addOffset = function addOffset(current, addition) {\n  return {\n    left: current.left + addition.left,\n    top: current.top + addition.top\n  };\n};\nvar getWindow = function getWindow() {\n  return utils.canUseDOM() ? window : null;\n};\nvar getFontStyles = function getFontStyles(el) {\n  var window = getWindow();\n  if (!window || !el) {\n    return [];\n  }\n  var computedStyles = window.getComputedStyle(el);\n  return STYLES.map(function (font) {\n    return {\n      key: font,\n      value: computedStyles[font]\n    };\n  });\n};\nvar hasOffsetParent = function hasOffsetParent(el) {\n  if (!el) {\n    return false;\n  }\n  return Boolean(el.offsetParent);\n};\nvar offset = function offset(el) {\n  if (!el) {\n    return null;\n  }\n  return offsetBase(el);\n};\nvar offsetAtPoint = function offsetAtPoint(element, currentLocation) {\n  if (!element) {\n    return null;\n  }\n  var ref = element.style;\n  var left = ref.left;\n  var top = ref.top;\n  var transition = ref.transition;\n  element.style.transition = 'none';\n  element.style.left = currentLocation.left + \"px\";\n  element.style.top = currentLocation.top + \"px\";\n  var currentOffset = offsetBase(element);\n  element.style.left = left;\n  element.style.top = top;\n\n  // prevents elements with transition to be animated because of the change\n  // tslint:disable-next-line:no-unused-expression\n  element.offsetHeight;\n  element.style.transition = transition;\n  return currentOffset;\n};\nvar position = function position(element, popupElement, scale) {\n  if (!element || !popupElement) {\n    return null;\n  }\n  var currentScale = scale || 1;\n  return positionWithScroll(element, popupElement, currentScale);\n};\nvar OVERFLOW_REGEXP = /auto|scroll/;\nvar overflowElementStyle = function overflowElementStyle(element) {\n  return \"\" + element.style.overflow + element.style.overflowX + element.style.overflowY;\n};\nvar overflowComputedStyle = function overflowComputedStyle(element) {\n  var styles = window.getComputedStyle(element);\n  return \"\" + styles.overflow + styles.overflowX + styles.overflowY;\n};\nvar overflowStyle = function overflowStyle(element) {\n  return overflowElementStyle(element) || overflowComputedStyle(element);\n};\nvar scrollableParents = function scrollableParents(element) {\n  var parentElements = [];\n  if (!utils.canUseDOM()) {\n    return parentElements;\n  }\n  var parent = element.parentElement;\n  while (parent) {\n    if (OVERFLOW_REGEXP.test(overflowStyle(parent)) || parent.hasAttribute('data-scrollable')) {\n      parentElements.push(parent);\n    }\n    parent = parent.parentElement;\n  }\n  parentElements.push(window);\n  return parentElements;\n};\nvar getRelativeContextElement = function getRelativeContextElement(el) {\n  if (!el || !utils.hasRelativeStackingContext()) {\n    return null;\n  }\n  var parent = el.parentElement;\n  while (parent) {\n    if (window.getComputedStyle(parent).transform !== 'none') {\n      return parent;\n    }\n    parent = parent.parentElement;\n  }\n  return null;\n};\nvar stackingElementOffset = function stackingElementOffset(el) {\n  var relativeContextElement = getRelativeContextElement(el);\n  if (!relativeContextElement) {\n    return null;\n  }\n  return offsetBase(relativeContextElement);\n};\nvar stackingElementScroll = function stackingElementScroll(el) {\n  var relativeContextElement = getRelativeContextElement(el);\n  if (!relativeContextElement) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  return {\n    x: relativeContextElement.scrollLeft,\n    y: relativeContextElement.scrollTop\n  };\n};\nvar stackingElementViewPort = function stackingElementViewPort(el) {\n  var relativeContextElement = getRelativeContextElement(el);\n  if (!relativeContextElement) {\n    return null;\n  }\n  return {\n    height: relativeContextElement.scrollHeight,\n    width: relativeContextElement.scrollWidth\n  };\n};\nvar useRelativePosition = function useRelativePosition(el) {\n  return Boolean(getRelativeContextElement(el));\n};\nvar zoomLevel = function zoomLevel() {\n  if (!utils.canUseDOM()) {\n    return 1;\n  }\n  return parseFloat((document.documentElement.clientWidth / window.innerWidth).toFixed(2)) || 1;\n};\nvar isZoomed = function isZoomed() {\n  return zoomLevel() > 1;\n};\nvar zIndex = function zIndex(anchor, container) {\n  if (!anchor || !utils.canUseDOM()) {\n    return null;\n  }\n  var sibling = siblingContainer(anchor, container);\n  if (!sibling) {\n    return null;\n  }\n  var result = [anchor].concat(parents(anchor, sibling)).reduce(function (index, p) {\n    var zIndexStyle = p.style.zIndex || window.getComputedStyle(p).zIndex;\n    var current = parseInt(zIndexStyle, 10);\n    return current > index ? current : index;\n  }, 0);\n  return result ? result + 1 : null;\n};\nvar domUtils = {\n  addOffset: addOffset,\n  addScroll: addScroll,\n  align: align,\n  boundingOffset: boundingOffset,\n  getFontStyles: getFontStyles,\n  getWindow: getWindow,\n  hasOffsetParent: hasOffsetParent,\n  offset: offset,\n  offsetAtPoint: offsetAtPoint,\n  position: position,\n  removeScroll: removeScroll,\n  restrictToView: restrictToView,\n  scrollPosition: scrollPosition,\n  scrollableParents: scrollableParents,\n  getRelativeContextElement: getRelativeContextElement,\n  stackingElementOffset: stackingElementOffset,\n  stackingElementScroll: stackingElementScroll,\n  stackingElementViewPort: stackingElementViewPort,\n  useRelativePosition: useRelativePosition,\n  windowViewPort: windowViewPort,\n  zoomLevel: zoomLevel,\n  isZoomed: isZoomed,\n  zIndex: zIndex\n};\nexport default domUtils;","map":null,"metadata":{},"sourceType":"module"}