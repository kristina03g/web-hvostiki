{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as React from 'react';\nimport { InstanceObserver } from '@progress/kendo-charts';\nimport { toDomEvent } from './../events/dom-event';\nimport { hasParent } from '../utils/main';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { ChartContext } from '../ChartContext';\nvar COLLISION = {\n  horizontal: 'fit',\n  vertical: 'fit'\n};\nvar TOOLTIP_CLASS = 'k-chart-tooltip';\nvar POPUP_WRAPPER_CLASS = 'k-chart-tooltip-wrapper';\n/**\n * @hidden\n */\nvar TooltipPopup = /** @class */function (_super) {\n  __extends(TooltipPopup, _super);\n  function TooltipPopup(props, context) {\n    var _this = _super.call(this, props, context) || this;\n    _this.context = null;\n    _this.element = null;\n    _this.onChartMouseLeave = function (e) {\n      var syntheticEvent = e.syntheticEvent;\n      if (hasParent(syntheticEvent.relatedTarget, _this.element)) {\n        /* prevent default behavior so that the tooltip won't be hidden */\n        return true;\n      }\n      return false;\n    };\n    _this.onMouseLeave = function (e) {\n      var domEvent = toDomEvent(_this, e);\n      var isDefaultPrevented = _this.context.childrenObserver.trigger('onMouseLeave', domEvent);\n      if (isDefaultPrevented) {\n        e.preventDefault();\n      }\n    };\n    _this.chartObserver = new InstanceObserver(_this, {\n      onMouseLeave: 'onChartMouseLeave'\n    });\n    context.observersStore.dispatch({\n      type: 'add',\n      payload: _this.chartObserver\n    });\n    return _this;\n  }\n  TooltipPopup.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      popupShown = _a.popupShown,\n      popupAlign = _a.popupAlign,\n      popupOffset = _a.popupOffset,\n      popupStyles = _a.popupStyles,\n      popupContent = _a.popupContent,\n      className = _a.className;\n    var wrapperClass = [TOOLTIP_CLASS, className].join(' ').trim();\n    var popupComponent = React.createElement(Popup, {\n      animate: false,\n      popupAlign: popupAlign,\n      offset: popupOffset,\n      show: popupShown,\n      collision: COLLISION,\n      className: POPUP_WRAPPER_CLASS\n    }, React.createElement(\"div\", {\n      className: wrapperClass,\n      style: popupStyles,\n      onMouseLeave: this.onMouseLeave,\n      ref: function ref(el) {\n        return _this.element = el;\n      }\n    }, popupContent()));\n    return popupComponent;\n  };\n  TooltipPopup.prototype.componentWillUnmount = function () {\n    this.context.observersStore.dispatch({\n      type: 'remove',\n      payload: this.chartObserver\n    });\n  };\n  TooltipPopup.contextType = ChartContext;\n  return TooltipPopup;\n}(React.Component);\nexport { TooltipPopup };","map":null,"metadata":{},"sourceType":"module"}