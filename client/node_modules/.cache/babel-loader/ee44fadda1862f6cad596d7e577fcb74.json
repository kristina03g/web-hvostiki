{"ast":null,"code":"import { geometry as g, drawing as d } from '@progress/kendo-drawing';\nimport { Class, defined, last, setDefaultOptions } from '../../common';\nimport { proxy } from '../utils';\nimport { Layer } from './layer';\nimport { Movable } from '../scroller/draggable';\nimport { Location } from '../location';\nvar Group = d.Group;\nexport var ShapeLayer = function (Layer) {\n  function ShapeLayer(map, options) {\n    Layer.call(this, map, options);\n    this._pan = proxy(this._pan, this);\n    this.surface = d.Surface.create(this.element, {\n      width: map.scrollElement.clientWidth,\n      height: map.scrollElement.clientHeight\n    });\n    this._initRoot();\n    this.movable = new Movable(this.surface.element);\n    this._markers = [];\n    this._click = this._handler('shapeClick');\n    this.surface.bind('click', this._click);\n    this._mouseleave = this._handler('shapeMouseLeave');\n    this.surface.bind('mouseleave', this._mouseleave);\n    this.surface.bind('mouseenter', this._mouseenter.bind(this));\n  }\n  if (Layer) ShapeLayer.__proto__ = Layer;\n  ShapeLayer.prototype = Object.create(Layer && Layer.prototype);\n  ShapeLayer.prototype.constructor = ShapeLayer;\n  ShapeLayer.prototype.destroy = function destroy() {\n    Layer.prototype.destroy.call(this);\n    this.surface.destroy();\n  };\n  ShapeLayer.prototype._reset = function _reset() {\n    Layer.prototype._reset.call(this);\n    this._translateSurface();\n    this._data = this._readData();\n    if (this._hasData()) {\n      this._load(this._data);\n    }\n  };\n  ShapeLayer.prototype._initRoot = function _initRoot() {\n    this._root = new Group();\n    this.surface.draw(this._root);\n  };\n  ShapeLayer.prototype._beforeReset = function _beforeReset() {\n    this.surface.clear();\n    this._initRoot();\n  };\n  ShapeLayer.prototype._resize = function _resize() {\n    this.surface.size(this.map.size());\n  };\n  ShapeLayer.prototype._readData = function _readData() {\n    var data = Layer.prototype._readData.call(this);\n    if (data.type === \"FeatureCollection\") {\n      return data.features;\n    }\n    if (data.type === \"GeometryCollection\") {\n      return data.geometries;\n    }\n    return data;\n  };\n  ShapeLayer.prototype._load = function _load(data) {\n    var this$1 = this;\n    this._data = data;\n    this._clearMarkers();\n    if (!this._loader) {\n      this._loader = new GeoJsonLoader(this.map, this.options.style, this);\n    }\n    var container = new Group();\n    for (var i = 0; i < data.length; i++) {\n      var shape = this$1._loader.parse(data[i]);\n      if (shape) {\n        container.append(shape);\n      }\n    }\n    this._root.clear();\n    this._root.append(container);\n  };\n  ShapeLayer.prototype.shapeCreated = function shapeCreated(shape) {\n    var cancelled = false;\n\n    // the GeoJSON loader builds \"Point\" type as a circle\n    // use the circle shape type as and indicator for rendering a marker\n    // keep the behavior under a setting as this is supported by kendo jQuery Map\n    // but we opted out of this in blazor\n    if (shape instanceof d.Circle && this.map.options.renderPointsAsMarkers) {\n      cancelled = defined(this._createMarker(shape));\n    }\n    if (!cancelled) {\n      var args = {\n        layer: this,\n        shape: shape\n      };\n      cancelled = this.map.trigger('shapeCreated', args);\n    }\n    return cancelled;\n  };\n  ShapeLayer.prototype.featureCreated = function featureCreated(e) {\n    e.layer = this;\n    this.map.trigger('shapeFeatureCreated', e);\n  };\n  ShapeLayer.prototype._createMarker = function _createMarker(shape) {\n    var marker = this.map.markers.bind({\n      location: shape.location\n    }, shape.dataItem);\n    if (marker) {\n      this._markers.push(marker);\n    }\n    return marker;\n  };\n  ShapeLayer.prototype._clearMarkers = function _clearMarkers() {\n    var this$1 = this;\n    for (var i = 0; i < this._markers.length; i++) {\n      this$1.map.markers.remove(this$1._markers[i]);\n    }\n    this._markers = [];\n  };\n  ShapeLayer.prototype._pan = function _pan() {\n    if (!this._panning) {\n      this._panning = true;\n      this.surface.suspendTracking();\n    }\n  };\n  ShapeLayer.prototype._panEnd = function _panEnd(e) {\n    Layer.prototype._panEnd.call(this, e);\n    this._translateSurface();\n    this.surface.resumeTracking();\n    this._panning = false;\n  };\n  ShapeLayer.prototype._translateSurface = function _translateSurface() {\n    var map = this.map;\n    var nw = map.locationToView(map.extent().nw);\n    if (this.surface.translate) {\n      this.surface.translate(nw);\n      this.movable.moveTo({\n        x: nw.x,\n        y: nw.y\n      });\n    }\n  };\n  ShapeLayer.prototype._eventArgs = function _eventArgs(e) {\n    return {\n      layer: this,\n      layerIndex: this._layerIndex(),\n      shape: e.element,\n      shapeIndex: (this._data || []).indexOf(e.element.dataItem),\n      originalEvent: e.originalEvent\n    };\n  };\n  ShapeLayer.prototype._handler = function _handler(eventName) {\n    var this$1 = this;\n    return function (e) {\n      if (e.element) {\n        this$1.map.trigger(eventName, this$1._eventArgs(e));\n      }\n    };\n  };\n  ShapeLayer.prototype._mouseenter = function _mouseenter(e) {\n    if (!e.element) {\n      return;\n    }\n    this.map.trigger('shapeMouseEnter', this._eventArgs(e));\n    var shape = e.element;\n    var anchor = this._tooltipAnchor(e);\n    this.map._tooltip.show(anchor, this._tooltipContext(shape));\n  };\n  ShapeLayer.prototype._tooltipContext = function _tooltipContext(shape) {\n    return {\n      type: 'shape',\n      layerIndex: this._layerIndex(),\n      className: 'k-map-shape-tooltip',\n      dataItem: shape.dataItem,\n      location: shape.location\n    };\n  };\n  ShapeLayer.prototype._tooltipAnchor = function _tooltipAnchor(e) {\n    var cursor = this.map.eventOffset(e.originalEvent);\n    return {\n      top: cursor.y,\n      left: cursor.x\n    };\n  };\n  ShapeLayer.prototype._activate = function _activate() {\n    Layer.prototype._activate.call(this);\n    this._panHandler = proxy(this._pan, this);\n    this.map.bind('pan', this.panHandler);\n  };\n  ShapeLayer.prototype._deactivate = function _deactivate() {\n    Layer.prototype._deactivate.call(this);\n    this.map.unbind('pan', this._panHandler);\n  };\n  return ShapeLayer;\n}(Layer);\nsetDefaultOptions(ShapeLayer, {\n  autoBind: true,\n  zIndex: 100\n});\nvar GeoJsonLoader = function (Class) {\n  function GeoJsonLoader(locator, defaultStyle, observer) {\n    Class.call(this);\n    this.observer = observer;\n    this.locator = locator;\n    this.style = defaultStyle;\n  }\n  if (Class) GeoJsonLoader.__proto__ = Class;\n  GeoJsonLoader.prototype = Object.create(Class && Class.prototype);\n  GeoJsonLoader.prototype.constructor = GeoJsonLoader;\n  GeoJsonLoader.prototype.parse = function parse(item) {\n    var root = new Group();\n    var unwrap = true;\n    if (item.type === 'Feature') {\n      unwrap = false;\n      this._loadGeometryTo(root, item.geometry, item);\n      this._featureCreated(root, item);\n    } else {\n      this._loadGeometryTo(root, item, item);\n    }\n    if (unwrap && root.children.length < 2) {\n      root = root.children[0];\n    }\n    return root;\n  };\n  GeoJsonLoader.prototype._shapeCreated = function _shapeCreated(shape) {\n    var cancelled = false;\n    if (this.observer && this.observer.shapeCreated) {\n      cancelled = this.observer.shapeCreated(shape);\n    }\n    return cancelled;\n  };\n  GeoJsonLoader.prototype._featureCreated = function _featureCreated(group, dataItem) {\n    if (this.observer && this.observer.featureCreated) {\n      this.observer.featureCreated({\n        group: group,\n        dataItem: dataItem,\n        properties: dataItem.properties\n      });\n    }\n  };\n\n  /* eslint-disable indent */\n  GeoJsonLoader.prototype._loadGeometryTo = function _loadGeometryTo(container, geometry, dataItem) {\n    var this$1 = this;\n    var coords = geometry.coordinates;\n    var i;\n    var path;\n    switch (geometry.type) {\n      case 'LineString':\n        path = this._loadPolygon(container, [coords], dataItem);\n        this._setLineFill(path);\n        break;\n      case 'MultiLineString':\n        for (i = 0; i < coords.length; i++) {\n          path = this$1._loadPolygon(container, [coords[i]], dataItem);\n          this$1._setLineFill(path);\n        }\n        break;\n      case 'Polygon':\n        this._loadPolygon(container, coords, dataItem);\n        break;\n      case 'MultiPolygon':\n        for (i = 0; i < coords.length; i++) {\n          this$1._loadPolygon(container, coords[i], dataItem);\n        }\n        break;\n      case 'Point':\n        this._loadPoint(container, coords, dataItem);\n        break;\n      case 'MultiPoint':\n        for (i = 0; i < coords.length; i++) {\n          this$1._loadPoint(container, coords[i], dataItem);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  /* eslint-disable indent */\n\n  GeoJsonLoader.prototype._setLineFill = function _setLineFill(path) {\n    var segments = path.segments;\n    if (segments.length < 4 || !segments[0].anchor().equals(last(segments).anchor())) {\n      path.options.fill = null;\n    }\n  };\n  GeoJsonLoader.prototype._loadShape = function _loadShape(container, shape) {\n    if (!this._shapeCreated(shape)) {\n      container.append(shape);\n    }\n    return shape;\n  };\n  GeoJsonLoader.prototype._loadPolygon = function _loadPolygon(container, rings, dataItem) {\n    var shape = this._buildPolygon(rings);\n    shape.dataItem = dataItem;\n    shape.location = this.locator.viewToLocation(shape.bbox().center());\n    return this._loadShape(container, shape);\n  };\n  GeoJsonLoader.prototype._buildPolygon = function _buildPolygon(rings) {\n    var this$1 = this;\n    var type = rings.length > 1 ? d.MultiPath : d.Path;\n    var path = new type(this.style);\n    for (var i = 0; i < rings.length; i++) {\n      for (var j = 0; j < rings[i].length; j++) {\n        var point = this$1.locator.locationToView(Location.fromLngLat(rings[i][j]));\n        if (j === 0) {\n          path.moveTo(point.x, point.y);\n        } else {\n          path.lineTo(point.x, point.y);\n        }\n      }\n    }\n    return path;\n  };\n  GeoJsonLoader.prototype._loadPoint = function _loadPoint(container, coords, dataItem) {\n    var location = Location.fromLngLat(coords);\n    var point = this.locator.locationToView(location);\n    var circle = new g.Circle(point, 10);\n    var shape = new d.Circle(circle, this.style);\n    shape.dataItem = dataItem;\n    shape.location = location;\n    return this._loadShape(container, shape);\n  };\n  return GeoJsonLoader;\n}(Class);","map":null,"metadata":{},"sourceType":"module"}