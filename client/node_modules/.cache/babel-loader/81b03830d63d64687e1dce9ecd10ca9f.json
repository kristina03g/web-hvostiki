{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as React from 'react';\nimport { InstanceObserver } from '@progress/kendo-charts';\nimport { ChartContext } from './ChartContext';\n/**\n * @hidden\n */\nvar DonutCenter = /** @class */function (_super) {\n  __extends(DonutCenter, _super);\n  function DonutCenter(props, context) {\n    var _this = _super.call(this, props, context) || this;\n    _this.context = null;\n    _this.state = {\n      donutCenterStyles: null\n    };\n    _this.chartObserver = new InstanceObserver(_this, {\n      render: 'onRender'\n    });\n    context.observersStore.dispatch({\n      type: 'add',\n      payload: _this.chartObserver\n    });\n    return _this;\n  }\n  DonutCenter.prototype.render = function () {\n    var render = this.props.render;\n    var donutCenterStyles = this.state.donutCenterStyles;\n    var renderer = null;\n    if (render && donutCenterStyles) {\n      renderer = React.createElement(\"div\", {\n        className: \"k-chart-donut-center\",\n        style: donutCenterStyles\n      }, render());\n    }\n    return renderer;\n  };\n  DonutCenter.prototype.onRender = function (event) {\n    var _a;\n    var series = (_a = this.context) === null || _a === void 0 ? void 0 : _a.optionsStore.getState().series;\n    var firstSeries = Array.isArray(series) ? series[0] : null;\n    var charts = event.sender._plotArea.charts;\n    if (!firstSeries || firstSeries.type !== 'donut' || charts[0].points.length === 0) {\n      return;\n    }\n    var sector = charts[0].points[0].sector;\n    var radius = sector.innerRadius;\n    var top = sector.center.y - radius;\n    var left = sector.center.x - radius;\n    var size = radius * 2;\n    this.setState({\n      donutCenterStyles: {\n        height: size,\n        left: left,\n        top: top,\n        width: size\n      }\n    });\n  };\n  DonutCenter.contextType = ChartContext;\n  return DonutCenter;\n}(React.Component);\nexport { DonutCenter };","map":null,"metadata":{},"sourceType":"module"}