{"ast":null,"code":"var detectBrowser = function detectBrowser() {\n  var ua = window && window.navigator.userAgent;\n  if (!ua) {\n    return false;\n  }\n  var browser = false;\n  var match = [];\n  var browserRxs = {\n    edge: /(edge)[ \\/]([\\w.]+)/i,\n    webkit: /(chrome|crios)[ \\/]([\\w.]+)/i,\n    safari: /(webkit)[ \\/]([\\w.]+)/i,\n    opera: /(opera)(?:.*version|)[ \\/]([\\w.]+)/i,\n    msie: /(msie\\s|trident.*? rv:)([\\w.]+)/i,\n    mozilla: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n  };\n  for (var agent in browserRxs) {\n    if (browserRxs.hasOwnProperty(agent)) {\n      match = ua.match(browserRxs[agent]);\n      if (match) {\n        browser = {};\n        browser[agent] = true;\n        browser[match[1].toLowerCase().split(\" \")[0].split(\"/\")[0]] = true;\n        browser.version = parseInt(document.DOCUMENT_NODE || match[2], 10);\n        break;\n      }\n    }\n  }\n  return browser;\n};\n/** @hidden */\nexport var getDocument = function getDocument(element) {\n  return element ? element.ownerDocument || window.document : window.document;\n};\n/** @hidden */\nexport var getWindow = function getWindow(element) {\n  var document = getDocument(element);\n  return document ? document.defaultView || window : window;\n};\n/** @hidden */\nexport var scrollableRoot = function scrollableRoot(element) {\n  var support = {\n    browser: detectBrowser()\n  };\n  var document = getDocument(element);\n  return support.browser.edge || support.browser.safari ? document.body : document.documentElement;\n};\n/** @hidden */\nexport var isScrollable = function isScrollable(el) {\n  if (el && el.className && typeof el.className === 'string' && el.className.indexOf('k-auto-scrollable') > -1) {\n    return true;\n  }\n  var overflow = window.getComputedStyle(el, 'overflow').overflow;\n  return overflow.indexOf('auto') > -1 || overflow.indexOf('scroll') > -1;\n};\n/** @hidden */\nexport var getScrollableParent = function getScrollableParent(el) {\n  var root = scrollableRoot(el);\n  if (!el || el === document.body || el === document.documentElement) {\n    return root;\n  }\n  var parent = el;\n  while (parent && parent !== document.body && parent.nodeType !== Node.DOCUMENT_FRAGMENT_NODE && parent.nodeType !== Node.DOCUMENT_NODE && !isScrollable(parent)) {\n    parent = parent.parentNode;\n  }\n  if (parent && (parent === document.body || parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE)) {\n    return root;\n  }\n  return parent;\n};\n/** @hidden */\nexport var autoScrollVelocity = function autoScrollVelocity(mouseX, mouseY, rect) {\n  var velocity = {\n    x: 0,\n    y: 0\n  };\n  var AUTO_SCROLL_AREA = 50;\n  if (mouseX - rect.left < AUTO_SCROLL_AREA) {\n    velocity.x = -(AUTO_SCROLL_AREA - (mouseX - rect.left));\n  } else if (rect.right - mouseX < AUTO_SCROLL_AREA) {\n    velocity.x = AUTO_SCROLL_AREA - (rect.right - mouseX);\n  }\n  if (mouseY - rect.top < AUTO_SCROLL_AREA) {\n    velocity.y = -(AUTO_SCROLL_AREA - (mouseY - rect.top));\n  } else if (rect.bottom - mouseY < AUTO_SCROLL_AREA) {\n    velocity.y = AUTO_SCROLL_AREA - (rect.bottom - mouseY);\n  }\n  return velocity;\n};\n/** @hidden */\nexport var scrollableViewPort = function scrollableViewPort(el, window) {\n  var root = scrollableRoot(el);\n  if (el === root) {\n    return {\n      top: root.scrollTop,\n      left: root.scrollLeft,\n      bottom: root.scrollTop + window.innerHeight,\n      right: root.scrollLeft + window.innerWidth\n    };\n  } else {\n    var rect = el.getBoundingClientRect();\n    return {\n      bottom: rect.top + rect.height,\n      right: rect.left + rect.width,\n      left: rect.left,\n      top: rect.top\n    };\n  }\n};\n/** @hidden */\nexport var isPointerInsideContainer = function isPointerInsideContainer(x, y, container) {\n  var rect = container.getBoundingClientRect();\n  return rect.top <= y && rect.left <= x && y <= rect.bottom && x <= rect.right;\n};","map":null,"metadata":{},"sourceType":"module"}