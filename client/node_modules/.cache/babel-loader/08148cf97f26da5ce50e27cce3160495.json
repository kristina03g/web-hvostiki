{"ast":null,"code":"import { Class } from '../../common';\nvar STRING = \"string\";\nvar FUNCTION = \"function\";\nvar preventDefault = function preventDefault() {\n  this._defaultPrevented = true;\n};\nvar isDefaultPrevented = function isDefaultPrevented() {\n  return this._defaultPrevented === true;\n};\nexport var Observable = function (Class) {\n  function Observable() {\n    Class.call(this);\n    this._events = {};\n  }\n  if (Class) Observable.__proto__ = Class;\n  Observable.prototype = Object.create(Class && Class.prototype);\n  Observable.prototype.constructor = Observable;\n  Observable.prototype.destroy = function destroy() {\n    this.unbind();\n  };\n  Observable.prototype.bind = function bind(event, handlers, one) {\n    var that = this,\n      idx,\n      eventNames = typeof event === STRING ? [event] : event || [],\n      length,\n      original,\n      _handler,\n      handlersIsFunction = typeof handlers === FUNCTION,\n      events;\n    if (handlers === undefined) {\n      for (idx in event) {\n        that.bind(idx, event[idx]);\n      }\n      return that;\n    }\n\n    /* eslint-disable no-loop-func */\n    var loop = function loop() {\n      var eventName = eventNames[idx];\n      _handler = handlersIsFunction ? handlers : handlers[eventName];\n      if (_handler) {\n        if (one) {\n          original = _handler;\n          _handler = function handler() {\n            that.unbind(eventName, _handler);\n            original.apply(that, arguments);\n          };\n          _handler.original = original;\n        }\n        events = that._events[eventName] = that._events[eventName] || [];\n        events.push(_handler);\n      }\n    };\n    for (idx = 0, length = eventNames.length; idx < length; idx++) loop();\n    /* eslint-enable no-loop-func */\n\n    return that;\n  };\n  Observable.prototype.one = function one(eventNames, handlers) {\n    return this.bind(eventNames, handlers, true);\n  };\n  Observable.prototype.first = function first(eventName, handlers) {\n    var that = this,\n      idx,\n      eventNames = typeof eventName === STRING ? [eventName] : eventName,\n      length,\n      handler,\n      handlersIsFunction = typeof handlers === FUNCTION,\n      events;\n    for (idx = 0, length = eventNames.length; idx < length; idx++) {\n      var eventName$1 = eventNames[idx];\n      handler = handlersIsFunction ? handlers : handlers[eventName$1];\n      if (handler) {\n        events = that._events[eventName$1] = that._events[eventName$1] || [];\n        events.unshift(handler);\n      }\n    }\n    return that;\n  };\n  Observable.prototype.trigger = function trigger(eventName, eventArgs) {\n    var that = this,\n      events = that._events[eventName],\n      idx,\n      length;\n    if (events) {\n      var e = eventArgs || {};\n      e.sender = that;\n      e._defaultPrevented = false;\n      e.preventDefault = preventDefault;\n      e.isDefaultPrevented = isDefaultPrevented;\n      events = events.slice();\n      for (idx = 0, length = events.length; idx < length; idx++) {\n        events[idx].call(that, e);\n      }\n      return e._defaultPrevented === true;\n    }\n    return false;\n  };\n  Observable.prototype.unbind = function unbind(eventName, handler) {\n    var that = this,\n      events = that._events[eventName],\n      idx;\n    if (eventName === undefined) {\n      that._events = {};\n    } else if (events) {\n      if (handler) {\n        for (idx = events.length - 1; idx >= 0; idx--) {\n          if (events[idx] === handler || events[idx].original === handler) {\n            events.splice(idx, 1);\n          }\n        }\n      } else {\n        that._events[eventName] = [];\n      }\n    }\n    return that;\n  };\n  Observable.prototype._setEvents = function _setEvents(options) {\n    var this$1 = this;\n    var length = (this.events || []).length;\n    for (var idx = 0; idx < length; idx++) {\n      var e = this$1.events[idx];\n      if (this$1.options[e] && options[e]) {\n        this$1.unbind(e, this$1.options[e]);\n        if (this$1._events && this$1._events[e]) {\n          delete this$1._events[e];\n        }\n      }\n    }\n    this.bind(this.events, options);\n  };\n  return Observable;\n}(Class);","map":null,"metadata":{},"sourceType":"module"}