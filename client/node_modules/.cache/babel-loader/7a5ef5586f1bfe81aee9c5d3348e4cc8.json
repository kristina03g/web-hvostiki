{"ast":null,"code":"import * as React from 'react';\n/**\n * @hidden\n */\nexport var useMouse = function useMouse(props, target, extend) {\n  if (extend === void 0) {\n    extend = {};\n  }\n  var handleMouseDown = React.useCallback(function (event) {\n    if (extend.onMouseDown) {\n      extend.onMouseDown.call(undefined, event);\n    }\n    if (props.onMouseDown) {\n      props.onMouseDown.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onMouseDown, props.onMouseDown, target]);\n  var handleMouseUp = React.useCallback(function (event) {\n    if (extend.onMouseUp) {\n      extend.onMouseUp.call(undefined, event);\n    }\n    if (props.onMouseUp) {\n      props.onMouseUp.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onMouseUp, props.onMouseUp, target]);\n  var handleClick = React.useCallback(function (event) {\n    if (extend.onClick) {\n      extend.onClick.call(undefined, event);\n    }\n    if (props.onClick) {\n      props.onClick.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onClick, props.onClick, target]);\n  var handleDoubleClick = React.useCallback(function (event) {\n    if (extend.onDoubleClick) {\n      extend.onDoubleClick.call(undefined, event);\n    }\n    if (props.onDoubleClick) {\n      props.onDoubleClick.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onDoubleClick, props.onDoubleClick, target]);\n  var handleMouseEnter = React.useCallback(function (event) {\n    if (extend.onMouseEnter) {\n      extend.onMouseEnter.call(undefined, event);\n    }\n    if (props.onMouseEnter) {\n      props.onMouseEnter.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onMouseEnter, props.onMouseEnter, target]);\n  var handleMouseLeave = React.useCallback(function (event) {\n    if (extend.onMouseLeave) {\n      extend.onMouseLeave.call(undefined, event);\n    }\n    if (props.onMouseLeave) {\n      props.onMouseLeave.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onMouseLeave, props.onMouseLeave, target]);\n  var handelMouseMove = React.useCallback(function (event) {\n    if (extend.onMouseMove) {\n      extend.onMouseMove.call(undefined, event);\n    }\n    if (props.onMouseMove) {\n      props.onMouseMove.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onMouseMove, props.onMouseMove, target]);\n  var handleMouseOut = React.useCallback(function (event) {\n    if (extend.onMouseOut) {\n      extend.onMouseOut.call(undefined, event);\n    }\n    if (props.onMouseOut) {\n      props.onMouseOut.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onMouseOut, props.onMouseOut, target]);\n  var handleMouseOver = React.useCallback(function (event) {\n    if (extend.onMouseOver) {\n      extend.onMouseOver.call(undefined, event);\n    }\n    if (props.onMouseOver) {\n      props.onMouseOver.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [extend.onMouseOver, props.onMouseOver, target]);\n  return {\n    onClick: handleClick,\n    onMouseUp: handleMouseUp,\n    onMouseDown: handleMouseDown,\n    onDoubleClick: handleDoubleClick,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onMouseMove: handelMouseMove,\n    onMouseOut: handleMouseOut,\n    onMouseOver: handleMouseOver\n  };\n};","map":null,"metadata":{},"sourceType":"module"}