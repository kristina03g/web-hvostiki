{"ast":null,"code":"import { deepExtend, addClass, keys, hasClasses, setDefaultOptions } from '../common';\nimport { Observable } from './scroller/observable';\nimport { on, off, setDefaultEvents, convertToHtml } from './utils';\nfunction createButton(direction, iconClass) {\n  var html = '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-zoom-' + direction + '\" title=\"zoom-' + direction + '\" aria-label=\"zoom-' + direction + '\">' + '<span class=\"k-icon ' + iconClass + '\">' + '</span>' + '</button>';\n  return convertToHtml(html);\n}\nvar PLUS = 187;\nvar MINUS = 189;\nvar FF_PLUS = 61;\nvar FF_MINUS = 173;\nvar CHANGE = \"change\";\nexport var ZoomControl = function (Observable) {\n  function ZoomControl(element, options) {\n    Observable.call(this);\n    this.element = element;\n    this._initOptions(options);\n    var zoomInButton = createButton('in', 'k-i-plus');\n    var zoomOutButton = createButton('out', 'k-i-minus');\n    this.element.appendChild(zoomInButton);\n    this.element.appendChild(zoomOutButton);\n    addClass(this.element, 'k-widget k-zoom-control k-button-group k-group-horizontal');\n    this._clickHandler = this._click.bind(this);\n    on(this.element, \"click\", \".k-button\", this._clickHandler);\n    var parentElement = this.element.parentNode.closest(\"[data-role]\");\n    this._keyroot = parentElement ? parentElement : this.element;\n    this._tabindex(this._keyroot);\n    this._keydownHandler = this._keydown.bind(this);\n    on(this._keyroot, \"keydown\", this._keydownHandler);\n  }\n  if (Observable) ZoomControl.__proto__ = Observable;\n  ZoomControl.prototype = Object.create(Observable && Observable.prototype);\n  ZoomControl.prototype.constructor = ZoomControl;\n  ZoomControl.prototype.destroy = function destroy() {\n    if (this.element) {\n      off(this.element, \"click\", this._clickHandler);\n    }\n    if (this._keyroot) {\n      off(this._keyroot, 'keydown', this._keydownHandler);\n    }\n  };\n  ZoomControl.prototype._tabindex = function _tabindex(target) {\n    var targetElement = target || this.wrapper || this.element;\n    var element = this.element,\n      TABINDEX = \"tabindex\",\n      tabindex = targetElement.getAttribute(TABINDEX) || element.getAttribute(TABINDEX);\n    element.removeAttribute(TABINDEX);\n    targetElement.setAttribute(TABINDEX, !isNaN(tabindex) ? tabindex : 0);\n  };\n  ZoomControl.prototype._initOptions = function _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  };\n  ZoomControl.prototype._change = function _change(direction) {\n    var zoomStep = this.options.zoomStep;\n    this.trigger(CHANGE, {\n      delta: direction * zoomStep\n    });\n  };\n  ZoomControl.prototype._click = function _click(e) {\n    var button = e.currentTarget;\n    var direction = 1;\n    if (hasClasses(button, 'k-zoom-out')) {\n      direction = -1;\n    }\n    this._change(direction);\n    e.preventDefault();\n  };\n\n  /* eslint-disable indent */\n  ZoomControl.prototype._keydown = function _keydown(e) {\n    switch (e.which) {\n      case keys.NUMPAD_PLUS:\n      case PLUS:\n      case FF_PLUS:\n        this._change(1);\n        break;\n      case keys.NUMPAD_MINUS:\n      case MINUS:\n      case FF_MINUS:\n        this._change(-1);\n        break;\n      default:\n        break;\n    }\n  };\n  return ZoomControl;\n}(Observable);\nsetDefaultOptions(ZoomControl, {\n  name: 'ZoomControl',\n  zoomStep: 1\n});\nsetDefaultEvents(ZoomControl, [CHANGE]);","map":null,"metadata":{},"sourceType":"module"}