{"ast":null,"code":"import withGeometry from '../mixins/with-geometry';\nimport Element from './element';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport { defined } from '../util';\nvar Image = function (superclass) {\n  function Image(src, rect, options) {\n    if (rect === void 0) rect = new Rect();\n    if (options === void 0) options = {};\n    superclass.call(this, options);\n    this.src(src);\n    this.rect(rect);\n  }\n  if (superclass) Image.__proto__ = superclass;\n  Image.prototype = Object.create(superclass && superclass.prototype);\n  Image.prototype.constructor = Image;\n  var prototypeAccessors = {\n    nodeType: {\n      configurable: true\n    }\n  };\n  prototypeAccessors.nodeType.get = function () {\n    return \"Image\";\n  };\n  Image.prototype.src = function src(value) {\n    if (defined(value)) {\n      this.options.set(\"src\", value);\n      return this;\n    }\n    return this.options.get(\"src\");\n  };\n  Image.prototype.bbox = function bbox(transformation) {\n    var combinedMatrix = toMatrix(this.currentTransform(transformation));\n    return this._rect.bbox(combinedMatrix);\n  };\n  Image.prototype.rawBBox = function rawBBox() {\n    return this._rect.bbox();\n  };\n  Image.prototype._containsPoint = function _containsPoint(point) {\n    return this._rect.containsPoint(point);\n  };\n  Image.prototype._hasFill = function _hasFill() {\n    return this.src();\n  };\n  Object.defineProperties(Image.prototype, prototypeAccessors);\n  return Image;\n}(withGeometry(Element, [\"rect\"]));\nexport default Image;","map":null,"metadata":{},"sourceType":"module"}