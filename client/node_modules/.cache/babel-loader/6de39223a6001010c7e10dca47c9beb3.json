{"ast":null,"code":"import { addClass, defined, valueOrDefault, deepExtend, setDefaultOptions } from '../common';\nimport { appendHtml, removeChildren } from './utils';\nimport { Observable } from './scroller/observable';\nexport var Attribution = function (Observable) {\n  function Attribution(element, options) {\n    Observable.call(this);\n    this.element = element;\n    this._initOptions(options);\n    this.items = [];\n    addClass(this.element, 'k-widget k-attribution');\n  }\n  if (Observable) Attribution.__proto__ = Observable;\n  Attribution.prototype = Object.create(Observable && Observable.prototype);\n  Attribution.prototype.constructor = Attribution;\n  Attribution.prototype._initOptions = function _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  };\n  Attribution.prototype.filter = function filter(extent, zoom) {\n    this._extent = extent;\n    this._zoom = zoom;\n    this._render();\n  };\n  Attribution.prototype.add = function add(item) {\n    var newItem = item;\n    if (defined(item)) {\n      if (typeof item === 'string') {\n        newItem = {\n          text: item\n        };\n      }\n      this.items.push(newItem);\n      this._render();\n    }\n  };\n  Attribution.prototype.remove = function remove(text) {\n    var this$1 = this;\n    var result = [];\n    for (var i = 0; i < this.items.length; i++) {\n      var item = this$1.items[i];\n      if (item.text !== text) {\n        result.push(item);\n      }\n    }\n    this.items = result;\n    this._render();\n  };\n  Attribution.prototype.clear = function clear() {\n    this.items = [];\n    removeChildren(this.element);\n  };\n  Attribution.prototype._render = function _render() {\n    var this$1 = this;\n    var result = [];\n    for (var i = 0; i < this.items.length; i++) {\n      var item = this$1.items[i];\n      var text = this$1._itemText(item);\n      if (text !== '') {\n        result.push(text);\n      }\n    }\n    if (result.length > 0) {\n      removeChildren(this.element);\n      var html = result.join(this.options.separator);\n      appendHtml(html, this.element);\n      this.showElement();\n    } else {\n      this.hideElement();\n    }\n  };\n  Attribution.prototype.hideElement = function hideElement() {\n    this.element.style.display = \"none\";\n  };\n  Attribution.prototype.showElement = function showElement() {\n    this.element.style.display = \"\";\n  };\n  Attribution.prototype._itemText = function _itemText(item) {\n    var text = '';\n    var inZoomLevel = this._inZoomLevel(item.minZoom, item.maxZoom);\n    var inArea = this._inArea(item.extent);\n    if (inZoomLevel && inArea) {\n      text += item.text;\n    }\n    return text;\n  };\n  Attribution.prototype._inZoomLevel = function _inZoomLevel(min, max) {\n    var result = true;\n    var newMin = valueOrDefault(min, -Number.MAX_VALUE);\n    var newMax = valueOrDefault(max, Number.MAX_VALUE);\n    result = this._zoom > newMin && this._zoom < newMax;\n    return result;\n  };\n  Attribution.prototype._inArea = function _inArea(area) {\n    var result = true;\n    if (area) {\n      result = area.contains(this._extent);\n    }\n    return result;\n  };\n  return Attribution;\n}(Observable);\nsetDefaultOptions(Attribution, {\n  name: 'Attribution',\n  separator: '&nbsp;|&nbsp;'\n});","map":null,"metadata":{},"sourceType":"module"}