{"ast":null,"code":"import { Class } from '../../../common';\nimport { EncodingResult } from '../encoding-result';\nimport { DataModeInstances } from '../data-modes/data-mode-instances';\nimport { extend } from '../../utils';\nimport { toBitsString } from '../../utils';\nimport { getVersion } from '../encoding';\nvar BYTE = \"byte\";\nexport var Utf8Encoder = function (Class) {\n  function Utf8Encoder() {\n    Class.call(this);\n    this.initProperties();\n    this.mode = DataModeInstances[this.encodingMode];\n  }\n  if (Class) Utf8Encoder.__proto__ = Class;\n  Utf8Encoder.prototype = Object.create(Class && Class.prototype);\n  Utf8Encoder.prototype.constructor = Utf8Encoder;\n  Utf8Encoder.prototype.initProperties = function initProperties() {\n    extend(this, {\n      encodingMode: BYTE,\n      utfBOM: \"111011111011101110111111\",\n      initialModeCountStringLength: 20,\n      ranges: [128, 2048, 65536, 2097152, 67108864]\n    });\n  };\n  Utf8Encoder.prototype.getEncodingResult = function getEncodingResult(inputString, errorCorrectionLevel) {\n    var data = this.encode(inputString),\n      dataCodewordsCount = this.getDataCodewordsCount(data),\n      version = getVersion(dataCodewordsCount, errorCorrectionLevel),\n      dataString = this.mode.getModeCountString(data.length / 8, version) + data;\n    return new EncodingResult(dataString, version);\n  };\n  Utf8Encoder.prototype.getDataCodewordsCount = function getDataCodewordsCount(data) {\n    var dataLength = data.length,\n      dataCodewordsCount = Math.ceil((this.initialModeCountStringLength + dataLength) / 8);\n    return dataCodewordsCount;\n  };\n  Utf8Encoder.prototype.encode = function encode(str) {\n    var this$1 = this;\n    var result = this.utfBOM;\n    for (var i = 0; i < str.length; i++) {\n      result += this$1.encodeCharacter(str.charCodeAt(i));\n    }\n    return result;\n  };\n  Utf8Encoder.prototype.encodeCharacter = function encodeCharacter(code) {\n    var bytesCount = this.getBytesCount(code),\n      bc = bytesCount - 1,\n      result = \"\";\n    if (bytesCount === 1) {\n      result = toBitsString(code, 8);\n    } else {\n      var significantOnes = 8 - bytesCount;\n      for (var i = 0; i < bc; i++) {\n        result = toBitsString(code >> i * 6 & 63 | 128, 8) + result;\n      }\n      result = (code >> bc * 6 | 255 >> significantOnes << significantOnes).toString(2) + result;\n    }\n    return result;\n  };\n  Utf8Encoder.prototype.getBytesCount = function getBytesCount(code) {\n    var ranges = this.ranges;\n    for (var i = 0; i < ranges.length; i++) {\n      if (code < ranges[i]) {\n        return i + 1;\n      }\n    }\n  };\n  return Utf8Encoder;\n}(Class);","map":null,"metadata":{},"sourceType":"module"}