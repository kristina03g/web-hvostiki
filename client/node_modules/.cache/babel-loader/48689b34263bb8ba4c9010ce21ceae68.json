{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { alignPathToPixel } from '../common';\nimport { ChartElement } from '../core';\nvar ChartContainer = function (ChartElement) {\n  function ChartContainer(options, pane) {\n    ChartElement.call(this, options);\n    this.pane = pane;\n  }\n  if (ChartElement) ChartContainer.__proto__ = ChartElement;\n  ChartContainer.prototype = Object.create(ChartElement && ChartElement.prototype);\n  ChartContainer.prototype.constructor = ChartContainer;\n  ChartContainer.prototype.shouldClip = function shouldClip() {\n    var children = this.children;\n    var length = children.length;\n    for (var i = 0; i < length; i++) {\n      if (children[i].options.clip === true) {\n        return true;\n      }\n    }\n    return false;\n  };\n  ChartContainer.prototype._clipBox = function _clipBox() {\n    return this.pane.chartsBox();\n  };\n  ChartContainer.prototype.createVisual = function createVisual() {\n    this.visual = new draw.Group({\n      zIndex: 0\n    });\n    if (this.shouldClip()) {\n      var clipBox = this.clipBox = this._clipBox();\n      var clipRect = clipBox.toRect();\n      var clipPath = draw.Path.fromRect(clipRect);\n      alignPathToPixel(clipPath);\n      this.visual.clip(clipPath);\n      this.unclipLabels();\n    }\n  };\n  ChartContainer.prototype.stackRoot = function stackRoot() {\n    return this;\n  };\n  ChartContainer.prototype.unclipLabels = function unclipLabels() {\n    var ref = this;\n    var charts = ref.children;\n    var clipBox = ref.clipBox;\n    for (var i = 0; i < charts.length; i++) {\n      var points = charts[i].points || {};\n      var length = points.length;\n      for (var j = 0; j < length; j++) {\n        var point = points[j];\n        if (point && point.visible !== false && point.overlapsBox && point.overlapsBox(clipBox)) {\n          if (point.unclipElements) {\n            point.unclipElements();\n          } else {\n            var label = point.label;\n            var note = point.note;\n            if (label && label.options.visible) {\n              if (label.alignToClipBox) {\n                label.alignToClipBox(clipBox);\n              }\n              label.options.noclip = true;\n            }\n            if (note && note.options.visible) {\n              note.options.noclip = true;\n            }\n          }\n        }\n      }\n    }\n  };\n  ChartContainer.prototype.destroy = function destroy() {\n    ChartElement.prototype.destroy.call(this);\n    delete this.parent;\n  };\n  return ChartContainer;\n}(ChartElement);\nChartContainer.prototype.isStackRoot = true;\nexport default ChartContainer;","map":null,"metadata":{},"sourceType":"module"}