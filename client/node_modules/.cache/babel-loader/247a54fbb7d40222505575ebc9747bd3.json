{"ast":null,"code":"import { Class } from '../common';\nvar HasObservers = function (Class) {\n  function HasObservers() {\n    Class.apply(this, arguments);\n  }\n  if (Class) HasObservers.__proto__ = Class;\n  HasObservers.prototype = Object.create(Class && Class.prototype);\n  HasObservers.prototype.constructor = HasObservers;\n  HasObservers.prototype.observers = function observers() {\n    this._observers = this._observers || [];\n    return this._observers;\n  };\n  HasObservers.prototype.addObserver = function addObserver(element) {\n    if (!this._observers) {\n      this._observers = [element];\n    } else {\n      this._observers.push(element);\n    }\n    return this;\n  };\n  HasObservers.prototype.removeObserver = function removeObserver(element) {\n    var observers = this.observers();\n    var index = observers.indexOf(element);\n    if (index !== -1) {\n      observers.splice(index, 1);\n    }\n    return this;\n  };\n  HasObservers.prototype.trigger = function trigger(methodName, event) {\n    var observers = this._observers;\n    if (observers && !this._suspended) {\n      for (var idx = 0; idx < observers.length; idx++) {\n        var observer = observers[idx];\n        if (observer[methodName]) {\n          observer[methodName](event);\n        }\n      }\n    }\n    return this;\n  };\n  HasObservers.prototype.optionsChange = function optionsChange(e) {\n    if (e === void 0) e = {};\n    e.element = this;\n    this.trigger(\"optionsChange\", e);\n  };\n  HasObservers.prototype.geometryChange = function geometryChange() {\n    this.trigger(\"geometryChange\", {\n      element: this\n    });\n  };\n  HasObservers.prototype.suspend = function suspend() {\n    this._suspended = (this._suspended || 0) + 1;\n    return this;\n  };\n  HasObservers.prototype.resume = function resume() {\n    this._suspended = Math.max((this._suspended || 0) - 1, 0);\n    return this;\n  };\n  HasObservers.prototype._observerField = function _observerField(field, value) {\n    if (this[field]) {\n      this[field].removeObserver(this);\n    }\n    this[field] = value;\n    value.addObserver(this);\n  };\n  return HasObservers;\n}(Class);\nexport default HasObservers;","map":null,"metadata":{},"sourceType":"module"}