{"ast":null,"code":"import { geometry as geom, drawing as draw } from '@progress/kendo-drawing';\nimport { Class, defined, addClass, setDefaultOptions, deepExtend, getSpacing, isObject, defaultErrorHandler } from '../common';\nimport { Box, TextBox } from '../core';\nimport { Encodings } from './encodings/main';\nimport { surfaceSize } from './surface-size';\nvar DEFAULT_BARCODE_WIDTH = 300;\nvar DEFAULT_BARCODE_HEIGHT = 100;\nvar Barcode = function (Class) {\n  function Barcode(element, options, errorHandler) {\n    if (errorHandler === void 0) errorHandler = defaultErrorHandler;\n    Class.call(this);\n    this.options = deepExtend({}, this.options, options);\n    this.element = element;\n    this.onError = errorHandler;\n    this._initElement();\n    this._initSurface();\n    this._setOptions(options);\n    if (options && defined(options.value)) {\n      this.redraw();\n    }\n  }\n  if (Class) Barcode.__proto__ = Class;\n  Barcode.prototype = Object.create(Class && Class.prototype);\n  Barcode.prototype.constructor = Barcode;\n  Barcode.prototype.destroy = function destroy() {\n    this._destroySurface();\n  };\n  Barcode.prototype._initElement = function _initElement() {\n    addClass(this.element, \"k-barcode\");\n  };\n  Barcode.prototype._initSurface = function _initSurface() {\n    var ref = this;\n    var options = ref.options;\n    var surface = ref.surface;\n    if (!surface || surface.options.type !== options.renderAs) {\n      this._destroySurface();\n      this._initSurfaceElement();\n      this.surface = this._createSurface();\n    }\n  };\n  Barcode.prototype._createSurface = function _createSurface() {\n    return draw.Surface.create(this.surfaceElement, {\n      type: this.options.renderAs\n    });\n  };\n  Barcode.prototype._destroySurface = function _destroySurface() {\n    if (this.surface) {\n      this.surface.destroy();\n      this.surface = null;\n      this._destroySurfaceElement();\n    }\n  };\n  Barcode.prototype._initSurfaceElement = function _initSurfaceElement() {\n    if (!this.surfaceElement) {\n      this.surfaceElement = document.createElement('div');\n      this.surfaceElement.style.position = 'relative';\n      this.element.appendChild(this.surfaceElement);\n    }\n  };\n  Barcode.prototype._destroySurfaceElement = function _destroySurfaceElement() {\n    if (this.surfaceElement && this.surfaceElement.parentNode) {\n      this.surfaceElement.parentNode.removeChild(this.surfaceElement);\n      this.surfaceElement = null;\n    }\n  };\n  Barcode.prototype.setOptions = function setOptions(options) {\n    this._setOptions(options);\n    this._initSurface();\n    this.redraw();\n  };\n  Barcode.prototype.redraw = function redraw() {\n    var size = this._getSize();\n    this.surface.clear();\n    this.surface.setSize({\n      width: size.width,\n      height: size.height\n    });\n    this.createVisual();\n    this.surface.draw(this.visual);\n  };\n  Barcode.prototype.getSize = function getSize() {\n    return {\n      width: this.element.offsetWidth,\n      height: this.element.offsetHeight\n    };\n  };\n  Barcode.prototype._resize = function _resize() {\n    this.redraw();\n  };\n  Barcode.prototype.createVisual = function createVisual() {\n    this.visual = this._render();\n  };\n  Barcode.prototype._render = function _render() {\n    var options = this.options;\n    var value = options.value;\n    var textOptions = options.text;\n    var textMargin = getSpacing(textOptions.margin);\n    var size = this._getSize();\n    var border = options.border || {};\n    var encoding = this.encoding;\n    var contentBox = new Box(0, 0, size.width, size.height).unpad(border.width).unpad(options.padding);\n    var barHeight = contentBox.height();\n    var encodedValue;\n    var textToDisplay;\n    var textHeight;\n    var visual = new draw.Group();\n    this.contentBox = contentBox;\n    visual.append(this._getBackground(size));\n    if (textOptions.visible) {\n      textHeight = draw.util.measureText(value, {\n        font: textOptions.font\n      }).height;\n      barHeight -= textHeight + textMargin.top + textMargin.bottom;\n    }\n    try {\n      encodedValue = encoding.encode(value, contentBox.width(), barHeight);\n    } catch (error) {\n      this.onError(error);\n      return visual;\n    }\n    if (textOptions.visible) {\n      textToDisplay = value;\n      if (options.checksum && defined(encoding.checksum)) {\n        textToDisplay += \" \" + encoding.checksum;\n      }\n      visual.append(this._getText(textToDisplay));\n    }\n    this.barHeight = barHeight;\n    this._bandsGroup = this._getBands(encodedValue.pattern, encodedValue.baseUnit);\n    visual.append(this._bandsGroup);\n    return visual;\n  };\n  Barcode.prototype.exportVisual = function exportVisual() {\n    return this._render();\n  };\n  Barcode.prototype._getSize = function _getSize() {\n    var element = this.element;\n    var elementSize = surfaceSize(element, this.options.renderAs);\n    var size = new geom.Size(DEFAULT_BARCODE_WIDTH, DEFAULT_BARCODE_HEIGHT);\n    if (elementSize.width > 0) {\n      size.width = elementSize.width;\n    }\n    if (elementSize.height > 0) {\n      size.height = elementSize.height;\n    }\n    if (this.options.width) {\n      size.width = this.options.width;\n    }\n    if (this.options.height) {\n      size.height = this.options.height;\n    }\n    return size;\n  };\n  Barcode.prototype.value = function value(value$1) {\n    if (!defined(value$1)) {\n      return this.options.value;\n    }\n    this.options.value = String(value$1);\n    this.redraw();\n  };\n  Barcode.prototype._getBands = function _getBands(pattern, baseUnit) {\n    var this$1 = this;\n    var contentBox = this.contentBox;\n    var offsetX = contentBox.x1;\n    var stepX;\n    var patternItem;\n    var group = new draw.Group();\n    for (var i = 0; i < pattern.length; i++) {\n      patternItem = isObject(pattern[i]) ? pattern[i] : {\n        width: pattern[i],\n        y1: 0,\n        y2: this$1.barHeight\n      };\n      stepX = patternItem.width * baseUnit;\n      if (i % 2) {\n        var rect = geom.Rect.fromPoints(new geom.Point(offsetX, patternItem.y1 + contentBox.y1), new geom.Point(offsetX + stepX, patternItem.y2 + contentBox.y1));\n        var path = draw.Path.fromRect(rect, {\n          fill: {\n            color: this$1.options.color\n          },\n          stroke: null\n        });\n        group.append(path);\n      }\n      offsetX += stepX;\n    }\n    return group;\n  };\n  Barcode.prototype._getBackground = function _getBackground(size) {\n    var options = this.options;\n    var border = options.border || {};\n    var box = new Box(0, 0, size.width, size.height).unpad(border.width / 2);\n    var path = draw.Path.fromRect(box.toRect(), {\n      fill: {\n        color: options.background\n      },\n      stroke: {\n        color: border.width ? border.color : \"\",\n        width: border.width,\n        dashType: border.dashType\n      }\n    });\n    return path;\n  };\n  Barcode.prototype._getText = function _getText(value) {\n    var textOptions = this.options.text;\n    var text = this._textbox = new TextBox(value, {\n      font: textOptions.font,\n      color: textOptions.color,\n      align: \"center\",\n      vAlign: \"bottom\",\n      margin: textOptions.margin\n    });\n    text.reflow(this.contentBox);\n    text.renderVisual();\n    return text.visual;\n  };\n  Barcode.prototype._setOptions = function _setOptions(options) {\n    this.type = (options.type || this.options.type).toLowerCase();\n    if (this.type === \"upca\") {\n      this.type = \"ean13\";\n      options.value = '0' + options.value;\n    }\n    if (this.type === \"upce\") {\n      this.type = \"ean8\";\n      options.value = '0' + options.value;\n    }\n    if (!Encodings[this.type]) {\n      throw new Error(\"Encoding '\" + this.type + \"' is not supported.\");\n    }\n    this.encoding = new Encodings[this.type]();\n    this.options = deepExtend({}, this.options, options);\n  };\n  return Barcode;\n}(Class);\nsetDefaultOptions(Barcode, {\n  name: \"Barcode\",\n  renderAs: \"svg\",\n  value: \"\",\n  type: \"code39\",\n  checksum: false,\n  width: 0,\n  height: 0,\n  color: \"black\",\n  background: \"white\",\n  text: {\n    visible: true,\n    font: \"16px Consolas, Monaco, Sans Mono, monospace, sans-serif\",\n    color: \"black\",\n    margin: {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  },\n  border: {\n    width: 0,\n    dashType: \"solid\",\n    color: \"black\"\n  },\n  padding: {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }\n});\nexport default Barcode;","map":null,"metadata":{},"sourceType":"module"}