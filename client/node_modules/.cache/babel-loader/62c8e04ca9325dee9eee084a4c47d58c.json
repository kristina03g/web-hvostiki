{"ast":null,"code":"import BaseSurface from '../core/surface';\nimport RootNode from './root-node';\nimport Group from '../shapes/group';\nimport transform from '../geometry/transform';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS } from './constants';\nimport { bindEvents, unbindEvents, elementStyles } from '../util';\nimport ArcNode from './arc-node';\nimport CircleNode from './circle-node';\nimport GroupNode from './group-node';\nimport ImageNode from './image-node';\nimport MultiPathNode from './multi-path-node';\nimport PathNode from './path-node';\nimport RectNode from './rect-node';\nimport TextNode from './text-node';\nimport NODE_MAP from './node-map';\nNODE_MAP.Arc = ArcNode;\nNODE_MAP.Circle = CircleNode;\nNODE_MAP.Group = GroupNode;\nNODE_MAP.Image = ImageNode;\nNODE_MAP.MultiPath = MultiPathNode;\nNODE_MAP.Path = PathNode;\nNODE_MAP.Rect = RectNode;\nNODE_MAP.Text = TextNode;\nvar RTL = 'rtl';\nfunction alignToScreen(element) {\n  var ctm;\n  try {\n    ctm = element.getScreenCTM ? element.getScreenCTM() : null;\n  } catch (e) {} // eslint-disable-line no-empty\n\n  if (ctm) {\n    var left = -ctm.e % 1;\n    var top = -ctm.f % 1;\n    var style = element.style;\n    if (left !== 0 || top !== 0) {\n      style.left = left + \"px\";\n      style.top = top + \"px\";\n    }\n  }\n}\nvar Surface = function (BaseSurface) {\n  function Surface(element, options) {\n    BaseSurface.call(this, element, options);\n    this._root = new RootNode(Object.assign({\n      rtl: elementStyles(element, 'direction').direction === RTL\n    }, this.options));\n    renderSVG(this.element, this._template(''));\n    this._rootElement = this.element.firstElementChild;\n    this._rootElement.style.width = '100%';\n    this._rootElement.style.height = '100%';\n    this._rootElement.style.overflow = 'hidden';\n    alignToScreen(this._rootElement);\n    this._root.attachTo(this._rootElement);\n    bindEvents(this.element, {\n      click: this._click,\n      mouseover: this._mouseenter,\n      mouseout: this._mouseleave,\n      mousemove: this._mousemove\n    });\n    this.resize();\n  }\n  if (BaseSurface) Surface.__proto__ = BaseSurface;\n  Surface.prototype = Object.create(BaseSurface && BaseSurface.prototype);\n  Surface.prototype.constructor = Surface;\n  var prototypeAccessors = {\n    type: {\n      configurable: true\n    }\n  };\n  prototypeAccessors.type.get = function () {\n    return \"svg\";\n  };\n  Surface.prototype.destroy = function destroy() {\n    if (this._root) {\n      this._root.destroy();\n      this._root = null;\n      this._rootElement = null;\n      unbindEvents(this.element, {\n        click: this._click,\n        mouseover: this._mouseenter,\n        mouseout: this._mouseleave,\n        mousemove: this._mousemove\n      });\n    }\n    BaseSurface.prototype.destroy.call(this);\n  };\n  Surface.prototype.translate = function translate(offset) {\n    var viewBox = Math.round(offset.x) + \" \" + Math.round(offset.y) + \" \" + this._size.width + \" \" + this._size.height;\n    this._offset = offset;\n    this._rootElement.setAttribute(\"viewBox\", viewBox);\n  };\n  Surface.prototype.draw = function draw(element) {\n    BaseSurface.prototype.draw.call(this, element);\n    this._root.load([element]);\n  };\n  Surface.prototype.clear = function clear() {\n    BaseSurface.prototype.clear.call(this);\n    this._root.clear();\n  };\n  Surface.prototype.svg = function svg() {\n    return \"<?xml version='1.0' ?>\" + this._template();\n  };\n  Surface.prototype.exportVisual = function exportVisual() {\n    var ref = this;\n    var visual = ref._visual;\n    var offset = ref._offset;\n    if (offset) {\n      var wrap = new Group();\n      wrap.children.push(visual);\n      wrap.transform(transform().translate(-offset.x, -offset.y));\n      visual = wrap;\n    }\n    return visual;\n  };\n  Surface.prototype._resize = function _resize() {\n    if (this._offset) {\n      this.translate(this._offset);\n    }\n  };\n  Surface.prototype._template = function _template(svgStyles) {\n    var styles = typeof svgStyles === 'string' ? svgStyles : \"style='width: 100%; height: 100%; overflow: hidden;' \";\n    return \"<svg \" + styles + \"xmlns='\" + SVG_NS + \"' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>\" + this._root.render() + \"</svg>\";\n  };\n  Object.defineProperties(Surface.prototype, prototypeAccessors);\n  return Surface;\n}(BaseSurface);\nexport default Surface;","map":null,"metadata":{},"sourceType":"module"}