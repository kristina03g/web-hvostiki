{"ast":null,"code":"import PathNode from './path-node';\nimport renderStyle from './utils/render-style';\nimport renderAttr from './utils/render-attribute';\nimport { htmlEncode, support } from '../common';\nimport { normalizeText } from '../text-metrics';\nvar ENTITY_REGEX = /&(?:[a-zA-Z]+|#\\d+);/g;\nfunction decodeEntities(text) {\n  if (!text || typeof text !== \"string\" || !ENTITY_REGEX.test(text)) {\n    return text;\n  }\n  var element = decodeEntities._element;\n  ENTITY_REGEX.lastIndex = 0;\n  return text.replace(ENTITY_REGEX, function (match) {\n    element.innerHTML = match;\n    return element.textContent || element.innerText;\n  });\n}\nif (typeof document !== \"undefined\") {\n  decodeEntities._element = document.createElement(\"span\");\n}\nvar TextNode = function (PathNode) {\n  function TextNode() {\n    PathNode.apply(this, arguments);\n  }\n  if (PathNode) TextNode.__proto__ = PathNode;\n  TextNode.prototype = Object.create(PathNode && PathNode.prototype);\n  TextNode.prototype.constructor = TextNode;\n  TextNode.prototype.geometryChange = function geometryChange() {\n    var pos = this.pos();\n    this.attr(\"x\", pos.x);\n    this.attr(\"y\", pos.y);\n    this.invalidate();\n  };\n  TextNode.prototype.optionsChange = function optionsChange(e) {\n    if (e.field === \"font\") {\n      this.attr(\"style\", renderStyle(this.mapStyle()));\n      this.geometryChange();\n    } else if (e.field === \"content\") {\n      PathNode.prototype.content.call(this, this.srcElement.content());\n    }\n    PathNode.prototype.optionsChange.call(this, e);\n  };\n  TextNode.prototype.mapStyle = function mapStyle(encode) {\n    var style = PathNode.prototype.mapStyle.call(this, encode);\n    var font = this.srcElement.options.font;\n    if (encode) {\n      font = htmlEncode(font);\n    }\n    style.push([\"font\", font], [\"white-space\", \"pre\"]);\n    return style;\n  };\n  TextNode.prototype.pos = function pos() {\n    var pos = this.srcElement.position();\n    var size = this.srcElement.measure();\n    return pos.clone().setY(pos.y + size.baseline);\n  };\n  TextNode.prototype.renderContent = function renderContent() {\n    var content = this.srcElement.content();\n    content = decodeEntities(content);\n    content = htmlEncode(content);\n    return normalizeText(content);\n  };\n  TextNode.prototype.renderTextAnchor = function renderTextAnchor() {\n    var anchor;\n    if ((this.options || {}).rtl && !(support.browser.msie || support.browser.edge)) {\n      anchor = 'end';\n    }\n    return renderAttr(\"text-anchor\", anchor);\n  };\n  TextNode.prototype.template = function template() {\n    return \"<text \" + this.renderId() + \" \" + this.renderTextAnchor() + \" \" + this.renderStyle() + \" \" + this.renderOpacity() + \"x='\" + this.pos().x + \"' y='\" + this.pos().y + \"' \" + this.renderStroke() + \" \" + this.renderTransform() + \" \" + this.renderDefinitions() + this.renderFill() + \">\" + this.renderContent() + \"</text>\";\n  };\n  return TextNode;\n}(PathNode);\nexport default TextNode;","map":null,"metadata":{},"sourceType":"module"}