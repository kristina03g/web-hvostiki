{"ast":null,"code":"import { Encoding } from './encoding';\nimport { setDefaultOptions } from '../../common';\nvar extend = Object.assign;\nexport var Code11 = function (Encoding) {\n  function Code11() {\n    Encoding.apply(this, arguments);\n  }\n  if (Encoding) Code11.__proto__ = Encoding;\n  Code11.prototype = Object.create(Encoding && Encoding.prototype);\n  Code11.prototype.constructor = Code11;\n  Code11.prototype.initProperties = function initProperties() {\n    Encoding.prototype.initProperties.call(this);\n    extend(this, {\n      name: \"Code 11\",\n      characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n      cCheckSumTotal: 10,\n      kCheckSumTotal: 9,\n      kCheckSumMinLength: 10,\n      checkSumMod: 11,\n      DASH_VALUE: 10,\n      DASH: \"-\",\n      START: \"112211\",\n      STOP: \"11221\"\n    });\n  };\n  Code11.prototype.initValue = function initValue(value, width) {\n    this.pattern = [];\n    this.value = value;\n    this.width = width;\n    this.totalUnits = 0;\n  };\n  Code11.prototype.addData = function addData() {\n    var this$1 = this;\n    var value = this.value;\n    this.addPattern(this.START);\n    for (var i = 0; i < value.length; i++) {\n      this$1.addCharacter(value.charAt(i));\n    }\n    if (this.options.addCheckSum) {\n      this.addCheckSum();\n    }\n    this.addPattern(this.STOP);\n    this.setBaseUnit();\n  };\n  Code11.prototype.setBaseUnit = function setBaseUnit() {\n    this.baseUnit = this.width / (this.totalUnits + this.quietZoneLength);\n  };\n  Code11.prototype.addCheckSum = function addCheckSum() {\n    var value = this.value;\n    var length = value.length;\n    var cValue = this.getWeightedSum(value, length, this.cCheckSumTotal) % this.checkSumMod;\n    this.checksum = String(cValue);\n    this.addPattern(this.characterMap[cValue]);\n    length++;\n    if (length >= this.kCheckSumMinLength) {\n      var kValue = (cValue + this.getWeightedSum(value, length, this.kCheckSumTotal)) % this.checkSumMod;\n      this.checksum += kValue;\n      this.addPattern(this.characterMap[kValue]);\n    }\n  };\n  Code11.prototype.getWeightedSum = function getWeightedSum(value, length, total) {\n    var this$1 = this;\n    var weightedSum = 0;\n    for (var i = 0; i < value.length; i++) {\n      weightedSum += this$1.weightedValue(this$1.getValue(value.charAt(i)), length, i, total);\n    }\n    return weightedSum;\n  };\n  Code11.prototype.weightedValue = function weightedValue(value, length, index, total) {\n    var weight = (length - index) % total || total;\n    return weight * value;\n  };\n  Code11.prototype.getValue = function getValue(character) {\n    if (!isNaN(character)) {\n      return parseInt(character, 10);\n    } else if (character !== this.DASH) {\n      this.invalidCharacterError(character);\n    }\n    return this.DASH_VALUE;\n  };\n  Code11.prototype.addCharacter = function addCharacter(character) {\n    var value = this.getValue(character);\n    var pattern = this.characterMap[value];\n    this.addPattern(pattern);\n  };\n  Code11.prototype.addPattern = function addPattern(pattern) {\n    var this$1 = this;\n    var value;\n    for (var i = 0; i < pattern.length; i++) {\n      value = parseInt(pattern.charAt(i), 10);\n      this$1.pattern.push(value);\n      this$1.totalUnits += value;\n    }\n  };\n  return Code11;\n}(Encoding);\nsetDefaultOptions(Code11, {\n  addCheckSum: true\n});","map":null,"metadata":{},"sourceType":"module"}