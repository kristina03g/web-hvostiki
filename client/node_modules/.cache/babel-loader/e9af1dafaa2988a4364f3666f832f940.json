{"ast":null,"code":"import Element from './element';\nimport Point from '../geometry/point';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport paintable from '../mixins/paintable';\nimport withPoints from '../mixins/with-points';\nimport { defined, measureText } from '../util';\nvar DEFAULT_FONT = \"12px sans-serif\";\nvar DEFAULT_FILL = \"#000\";\nvar Text = function (superclass) {\n  function Text(content, position, options) {\n    if (position === void 0) position = new Point();\n    if (options === void 0) options = {};\n    superclass.call(this, options);\n    this.content(content);\n    this.position(position);\n    if (!this.options.font) {\n      this.options.font = DEFAULT_FONT;\n    }\n    if (!defined(this.options.fill)) {\n      this.fill(DEFAULT_FILL);\n    }\n  }\n  if (superclass) Text.__proto__ = superclass;\n  Text.prototype = Object.create(superclass && superclass.prototype);\n  Text.prototype.constructor = Text;\n  var prototypeAccessors = {\n    nodeType: {\n      configurable: true\n    }\n  };\n  prototypeAccessors.nodeType.get = function () {\n    return \"Text\";\n  };\n  Text.prototype.content = function content(value) {\n    if (defined(value)) {\n      this.options.set(\"content\", value);\n      return this;\n    }\n    return this.options.get(\"content\");\n  };\n  Text.prototype.measure = function measure() {\n    var metrics = measureText(this.content(), {\n      font: this.options.get(\"font\")\n    });\n    return metrics;\n  };\n  Text.prototype.rect = function rect() {\n    var size = this.measure();\n    var pos = this.position().clone();\n    return new Rect(pos, [size.width, size.height]);\n  };\n  Text.prototype.bbox = function bbox(transformation) {\n    var combinedMatrix = toMatrix(this.currentTransform(transformation));\n    return this.rect().bbox(combinedMatrix);\n  };\n  Text.prototype.rawBBox = function rawBBox() {\n    return this.rect().bbox();\n  };\n  Text.prototype._containsPoint = function _containsPoint(point) {\n    return this.rect().containsPoint(point);\n  };\n  Object.defineProperties(Text.prototype, prototypeAccessors);\n  return Text;\n}(paintable(withPoints(Element, [\"position\"])));\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}