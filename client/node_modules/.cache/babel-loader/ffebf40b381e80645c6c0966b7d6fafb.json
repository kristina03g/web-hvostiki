{"ast":null,"code":"import { localeInfo, firstDay } from '../cldr';\nimport { DEFAULT_LOCALE, EMPTY } from '../common/constants';\nimport formatString from '../common/format-string';\nimport datePattern from './date-pattern';\nimport formatNames from './format-names';\nimport pad from '../common/pad';\nimport isDate from '../common/is-date';\nimport { dateFormatRegExp } from './constants';\nfunction formatDayOfWeekIndex(day, formatLength, localeInfo) {\n  var firstDayIndex = firstDay(localeInfo);\n  var dayIndex;\n  if (day < firstDayIndex) {\n    dayIndex = 7 - firstDayIndex + day;\n  } else {\n    dayIndex = day - firstDayIndex;\n  }\n  return dayIndex + 1;\n}\nfunction formatMonth(month, formatLength, info, standAlone) {\n  if (formatLength <= 2) {\n    return pad(month + 1, formatLength);\n  }\n  return formatNames(info, \"months\", formatLength, standAlone)[month];\n}\nfunction formatQuarter(date, formatLength, info, standAlone) {\n  var quarter = Math.floor(date.getMonth() / 3);\n  if (formatLength < 3) {\n    return quarter + 1;\n  }\n  return formatNames(info, \"quarters\", formatLength, standAlone)[quarter];\n}\nfunction formatTimeZone(date, info, options) {\n  var shortHours = options.shortHours;\n  var optionalMinutes = options.optionalMinutes;\n  var separator = options.separator;\n  var localizedName = options.localizedName;\n  var zZeroOffset = options.zZeroOffset;\n  var offset = date.getTimezoneOffset() / 60;\n  if (offset === 0 && zZeroOffset) {\n    return \"Z\";\n  }\n  var sign = offset <= 0 ? \"+\" : \"-\";\n  var hoursMinutes = Math.abs(offset).toString().split(\".\");\n  var minutes = hoursMinutes[1] || 0;\n  var result = sign + (shortHours ? hoursMinutes[0] : pad(hoursMinutes[0], 2));\n  if (minutes || !optionalMinutes) {\n    result += (separator ? \":\" : EMPTY) + pad(minutes, 2);\n  }\n  if (localizedName) {\n    var localizedFormat = offset === 0 ? info.calendar.gmtZeroFormat : info.calendar.gmtFormat;\n    result = formatString(localizedFormat, result);\n  }\n  return result;\n}\nfunction formatDayOfWeek(date, formatLength, info, standAlone) {\n  var result;\n  if (formatLength < 3) {\n    result = formatDayOfWeekIndex(date.getDay(), formatLength, info);\n  } else {\n    result = formatNames(info, \"days\", formatLength, standAlone)[date.getDay()];\n  }\n  return result;\n}\nvar formatters = {};\nformatters.d = function (date, formatLength) {\n  return pad(date.getDate(), formatLength);\n};\nformatters.E = function (date, formatLength, info) {\n  return formatNames(info, \"days\", formatLength)[date.getDay()];\n};\nformatters.M = function (date, formatLength, info) {\n  return formatMonth(date.getMonth(), formatLength, info, false);\n};\nformatters.L = function (date, formatLength, info) {\n  return formatMonth(date.getMonth(), formatLength, info, true);\n};\nformatters.y = function (date, formatLength) {\n  var year = date.getFullYear();\n  if (formatLength === 2) {\n    year = year % 100;\n  }\n  return pad(year, formatLength);\n};\nformatters.h = function (date, formatLength) {\n  var hours = date.getHours() % 12 || 12;\n  return pad(hours, formatLength);\n};\nformatters.H = function (date, formatLength) {\n  return pad(date.getHours(), formatLength);\n};\nformatters.k = function (date, formatLength) {\n  return pad(date.getHours() || 24, formatLength);\n};\nformatters.K = function (date, formatLength) {\n  return pad(date.getHours() % 12, formatLength);\n};\nformatters.m = function (date, formatLength) {\n  return pad(date.getMinutes(), formatLength);\n};\nformatters.s = function (date, formatLength) {\n  return pad(date.getSeconds(), formatLength);\n};\nformatters.S = function (date, formatLength) {\n  var milliseconds = date.getMilliseconds();\n  var result;\n  if (milliseconds !== 0) {\n    result = pad(String(milliseconds / 1000).split(\".\")[1].substr(0, formatLength), formatLength, true);\n  } else {\n    result = pad(EMPTY, formatLength);\n  }\n  return result;\n};\nformatters.a = function (date, formatLength, info) {\n  return formatNames(info, \"dayPeriods\", formatLength)[date.getHours() < 12 ? \"am\" : \"pm\"];\n};\nformatters.z = function (date, formatLength, info) {\n  return formatTimeZone(date, info, {\n    shortHours: formatLength < 4,\n    optionalMinutes: formatLength < 4,\n    separator: true,\n    localizedName: true\n  });\n};\nformatters.Z = function (date, formatLength, info) {\n  return formatTimeZone(date, info, {\n    separator: formatLength > 3,\n    localizedName: formatLength === 4,\n    zZeroOffset: formatLength === 5\n  });\n};\nformatters.x = function (date, formatLength, info) {\n  return formatTimeZone(date, info, {\n    optionalMinutes: formatLength === 1,\n    separator: formatLength === 3 || formatLength === 5\n  });\n};\nformatters.X = function (date, formatLength, info) {\n  return formatTimeZone(date, info, {\n    optionalMinutes: formatLength === 1,\n    separator: formatLength === 3 || formatLength === 5,\n    zZeroOffset: true\n  });\n};\nformatters.G = function (date, formatLength, info) {\n  var era = date.getFullYear() >= 0 ? 1 : 0;\n  return formatNames(info, \"eras\", formatLength)[era];\n};\nformatters.e = formatDayOfWeek;\nformatters.c = function (date, formatLength, info) {\n  return formatDayOfWeek(date, formatLength, info, true);\n};\nformatters.q = function (date, formatLength, info) {\n  return formatQuarter(date, formatLength, info, true);\n};\nformatters.Q = formatQuarter;\nexport default function formatDate(date, format, locale) {\n  if (locale === void 0) locale = DEFAULT_LOCALE;\n  if (!isDate(date)) {\n    if (date === undefined || date === null) {\n      return EMPTY;\n    }\n    return date;\n  }\n  var info = localeInfo(locale);\n  var pattern = datePattern(format, info);\n  return pattern.replace(dateFormatRegExp, function (match) {\n    var formatLength = match.length;\n    var result;\n    if (match.includes(\"'\") || match.includes(\"\\\"\")) {\n      result = match.slice(1, formatLength - 1);\n    } else {\n      result = formatters[match[0]](date, formatLength, info);\n    }\n    return result;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}