{"ast":null,"code":"import { Class } from '../common';\nimport HasObservers from './has-observers';\nimport { defined } from '../util';\nvar toString = {}.toString;\nvar OptionsStore = function (HasObservers) {\n  function OptionsStore(options, prefix) {\n    var this$1 = this;\n    if (prefix === void 0) prefix = \"\";\n    HasObservers.call(this);\n    this.prefix = prefix;\n    for (var field in options) {\n      var member = options[field];\n      member = this$1._wrap(member, field);\n      this$1[field] = member;\n    }\n  }\n  if (HasObservers) OptionsStore.__proto__ = HasObservers;\n  OptionsStore.prototype = Object.create(HasObservers && HasObservers.prototype);\n  OptionsStore.prototype.constructor = OptionsStore;\n  OptionsStore.prototype.get = function get(field) {\n    var parts = field.split(\".\");\n    var result = this;\n    while (parts.length && result) {\n      var part = parts.shift();\n      result = result[part];\n    }\n    return result;\n  };\n  OptionsStore.prototype.set = function set(field, value) {\n    var current = this.get(field);\n    if (current !== value) {\n      this._set(field, this._wrap(value, field));\n      this.optionsChange({\n        field: this.prefix + field,\n        value: value\n      });\n    }\n  };\n  OptionsStore.prototype._set = function _set(field, value) {\n    var this$1 = this;\n    var composite = field.indexOf(\".\") >= 0;\n    var parentObj = this;\n    var fieldName = field;\n    if (composite) {\n      var parts = fieldName.split(\".\");\n      var prefix = this.prefix;\n      while (parts.length > 1) {\n        fieldName = parts.shift();\n        prefix += fieldName + \".\";\n        var obj = parentObj[fieldName];\n        if (!obj) {\n          obj = new OptionsStore({}, prefix);\n          obj.addObserver(this$1);\n          parentObj[fieldName] = obj;\n        }\n        parentObj = obj;\n      }\n      fieldName = parts[0];\n    }\n    parentObj._clear(fieldName);\n    parentObj[fieldName] = value;\n  };\n  OptionsStore.prototype._clear = function _clear(field) {\n    var current = this[field];\n    if (current && current.removeObserver) {\n      current.removeObserver(this);\n    }\n  };\n  OptionsStore.prototype._wrap = function _wrap(object, field) {\n    var type = toString.call(object);\n    var wrapped = object;\n    if (wrapped !== null && defined(wrapped) && type === \"[object Object]\") {\n      if (!(object instanceof OptionsStore) && !(object instanceof Class)) {\n        wrapped = new OptionsStore(wrapped, this.prefix + field + \".\");\n      }\n      wrapped.addObserver(this);\n    }\n    return wrapped;\n  };\n  return OptionsStore;\n}(HasObservers);\nexport default OptionsStore;","map":null,"metadata":{},"sourceType":"module"}