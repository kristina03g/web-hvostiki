{"ast":null,"code":"import GeometryArc from '../geometry/arc';\nimport Element from './element';\nimport { Path } from './path';\nimport paintable from '../mixins/paintable';\nimport measurable from '../mixins/measurable';\nimport withGeometry from '../mixins/with-geometry';\nimport { defined } from '../util';\nvar DEFAULT_STROKE = \"#000\";\nvar Arc = function (superclass) {\n  function Arc(geometry, options) {\n    if (geometry === void 0) geometry = new GeometryArc();\n    if (options === void 0) options = {};\n    superclass.call(this, options);\n    this.geometry(geometry);\n    if (!defined(this.options.stroke)) {\n      this.stroke(DEFAULT_STROKE);\n    }\n  }\n  if (superclass) Arc.__proto__ = superclass;\n  Arc.prototype = Object.create(superclass && superclass.prototype);\n  Arc.prototype.constructor = Arc;\n  var prototypeAccessors = {\n    nodeType: {\n      configurable: true\n    }\n  };\n  prototypeAccessors.nodeType.get = function () {\n    return \"Arc\";\n  };\n  Arc.prototype._bbox = function _bbox(matrix) {\n    return this._geometry.bbox(matrix);\n  };\n  Arc.prototype.rawBBox = function rawBBox() {\n    return this.geometry().bbox();\n  };\n  Arc.prototype.toPath = function toPath() {\n    var path = new Path();\n    var curvePoints = this.geometry().curvePoints();\n    if (curvePoints.length > 0) {\n      path.moveTo(curvePoints[0].x, curvePoints[0].y);\n      for (var i = 1; i < curvePoints.length; i += 3) {\n        path.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);\n      }\n    }\n    return path;\n  };\n  Arc.prototype._containsPoint = function _containsPoint(point) {\n    return this.geometry().containsPoint(point);\n  };\n  Arc.prototype._isOnPath = function _isOnPath(point) {\n    return this.geometry()._isOnPath(point, this.options.stroke.width / 2);\n  };\n  Object.defineProperties(Arc.prototype, prototypeAccessors);\n  return Arc;\n}(paintable(measurable(withGeometry(Element))));\nexport default Arc;","map":null,"metadata":{},"sourceType":"module"}