{"ast":null,"code":"import LineChart from '../line-chart/line-chart';\nimport LinePoint from '../line-chart/line-point';\nimport AreaSegment from './area-segment';\nimport StepAreaSegment from './step-area-segment';\nimport SplineAreaSegment from './spline-area-segment';\nimport { STEP, SMOOTH, ZERO } from '../constants';\nvar AreaChart = function (LineChart) {\n  function AreaChart() {\n    LineChart.apply(this, arguments);\n  }\n  if (LineChart) AreaChart.__proto__ = LineChart;\n  AreaChart.prototype = Object.create(LineChart && LineChart.prototype);\n  AreaChart.prototype.constructor = AreaChart;\n  AreaChart.prototype.createSegment = function createSegment(linePoints, currentSeries, seriesIx, prevSegment) {\n    var isStacked = this.options.isStacked;\n    var style = (currentSeries.line || {}).style;\n    var previousSegment;\n    var stackPoints;\n    if (isStacked && seriesIx > 0 && prevSegment) {\n      var missingValues = this.seriesMissingValues(currentSeries);\n      if (missingValues !== \"gap\") {\n        stackPoints = prevSegment.linePoints;\n        previousSegment = prevSegment;\n      } else {\n        stackPoints = this._gapStackPoints(linePoints, seriesIx, style);\n      }\n    }\n    var pointType;\n    if (style === STEP) {\n      pointType = StepAreaSegment;\n    } else if (style === SMOOTH) {\n      pointType = SplineAreaSegment;\n    } else {\n      pointType = AreaSegment;\n    }\n    return new pointType(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);\n  };\n  AreaChart.prototype.reflow = function reflow(targetBox) {\n    var this$1 = this;\n    LineChart.prototype.reflow.call(this, targetBox);\n    var stackPoints = this._stackPoints;\n    if (stackPoints) {\n      for (var idx = 0; idx < stackPoints.length; idx++) {\n        var stackPoint = stackPoints[idx];\n        var pointSlot = this$1.categoryAxis.getSlot(stackPoint.categoryIx);\n        stackPoint.reflow(pointSlot);\n      }\n    }\n  };\n  AreaChart.prototype._gapStackPoints = function _gapStackPoints(linePoints, seriesIx, style) {\n    var this$1 = this;\n    var seriesPoints = this.seriesPoints;\n    var startIdx = linePoints[0].categoryIx;\n    var length = linePoints.length;\n    if (startIdx < 0) {\n      startIdx = 0;\n      length--;\n    }\n    var endIdx = startIdx + length;\n    var pointOffset = this.seriesOptions[0]._outOfRangeMinPoint ? 1 : 0;\n    var stackPoints = [];\n    this._stackPoints = this._stackPoints || [];\n    for (var categoryIx = startIdx; categoryIx < endIdx; categoryIx++) {\n      var pointIx = categoryIx + pointOffset;\n      var currentSeriesIx = seriesIx;\n      var point = void 0;\n      do {\n        currentSeriesIx--;\n        point = seriesPoints[currentSeriesIx][pointIx];\n      } while (currentSeriesIx > 0 && !point);\n      if (point) {\n        if (style !== STEP && categoryIx > startIdx && !seriesPoints[currentSeriesIx][pointIx - 1]) {\n          stackPoints.push(this$1._previousSegmentPoint(categoryIx, pointIx, pointIx - 1, currentSeriesIx));\n        }\n        stackPoints.push(point);\n        if (style !== STEP && categoryIx + 1 < endIdx && !seriesPoints[currentSeriesIx][pointIx + 1]) {\n          stackPoints.push(this$1._previousSegmentPoint(categoryIx, pointIx, pointIx + 1, currentSeriesIx));\n        }\n      } else {\n        var gapStackPoint = this$1._createGapStackPoint(categoryIx);\n        this$1._stackPoints.push(gapStackPoint);\n        stackPoints.push(gapStackPoint);\n      }\n    }\n    return stackPoints;\n  };\n  AreaChart.prototype._previousSegmentPoint = function _previousSegmentPoint(categoryIx, pointIx, segmentIx, seriesIdx) {\n    var seriesPoints = this.seriesPoints;\n    var index = seriesIdx;\n    var point;\n    while (index > 0 && !point) {\n      index--;\n      point = seriesPoints[index][segmentIx];\n    }\n    if (!point) {\n      point = this._createGapStackPoint(categoryIx);\n      this._stackPoints.push(point);\n    } else {\n      point = seriesPoints[index][pointIx];\n    }\n    return point;\n  };\n  AreaChart.prototype._createGapStackPoint = function _createGapStackPoint(categoryIx) {\n    var options = this.pointOptions({}, 0);\n    var point = new LinePoint(0, options);\n    point.categoryIx = categoryIx;\n    point.series = {};\n    return point;\n  };\n  AreaChart.prototype.seriesMissingValues = function seriesMissingValues(series) {\n    return series.missingValues || ZERO;\n  };\n  AreaChart.prototype.supportsPointInactiveOpacity = function supportsPointInactiveOpacity() {\n    return false;\n  };\n  return AreaChart;\n}(LineChart);\nexport default AreaChart;","map":null,"metadata":{},"sourceType":"module"}