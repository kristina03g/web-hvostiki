{"ast":null,"code":"import GeometryCircle from '../geometry/circle';\nimport paintable from '../mixins/paintable';\nimport measurable from '../mixins/measurable';\nimport withGeometry from '../mixins/with-geometry';\nimport Element from './element';\nimport { defined } from '../util';\nvar DEFAULT_STROKE = \"#000\";\nvar Circle = function (superclass) {\n  function Circle(geometry, options) {\n    if (geometry === void 0) geometry = new GeometryCircle();\n    if (options === void 0) options = {};\n    superclass.call(this, options);\n    this.geometry(geometry);\n    if (!defined(this.options.stroke)) {\n      this.stroke(DEFAULT_STROKE);\n    }\n  }\n  if (superclass) Circle.__proto__ = superclass;\n  Circle.prototype = Object.create(superclass && superclass.prototype);\n  Circle.prototype.constructor = Circle;\n  var prototypeAccessors = {\n    nodeType: {\n      configurable: true\n    }\n  };\n  prototypeAccessors.nodeType.get = function () {\n    return \"Circle\";\n  };\n  Circle.prototype.rawBBox = function rawBBox() {\n    return this._geometry.bbox();\n  };\n  Circle.prototype._bbox = function _bbox(matrix) {\n    return this._geometry.bbox(matrix);\n  };\n  Circle.prototype._containsPoint = function _containsPoint(point) {\n    return this.geometry().containsPoint(point);\n  };\n  Circle.prototype._isOnPath = function _isOnPath(point) {\n    return this.geometry()._isOnPath(point, this.options.stroke.width / 2);\n  };\n  Object.defineProperties(Circle.prototype, prototypeAccessors);\n  return Circle;\n}(paintable(measurable(withGeometry(Element))));\nexport default Circle;","map":null,"metadata":{},"sourceType":"module"}