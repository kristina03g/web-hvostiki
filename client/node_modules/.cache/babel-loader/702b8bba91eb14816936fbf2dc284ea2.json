{"ast":null,"code":"import * as React from 'react';\nimport { useCollection, COLLECTION_ACTION, useControlledState } from '../hooks';\nimport { DragContext, DropContext, DragsContext, DropsContext } from './context';\n/**\n * The `DragAndDrop` component is required for the `droppable` functionality to work properly.\n *\n * It is used internally to synchronize the `drag` and `drop` functionalities.\n * Accepts properties of type [DragAndDropProps]({% slug api_common_draganddropprops %}).\n */\nexport var DragAndDrop = function DragAndDrop(props) {\n  var _a = useControlledState(null, undefined),\n    drag = _a[0],\n    setDrag = _a[1];\n  var _b = useControlledState(null, undefined),\n    drop = _b[0],\n    setDrop = _b[1];\n  var _c = useCollection([]),\n    drags = _c[0],\n    dispatchDrags = _c[1];\n  var _d = useCollection([]),\n    drops = _d[0],\n    dispatchDrops = _d[1];\n  var registerDrag = function registerDrag(item) {\n    dispatchDrags({\n      type: COLLECTION_ACTION.add,\n      item: item\n    });\n  };\n  var deregisterDrag = function deregisterDrag(item) {\n    dispatchDrags({\n      type: COLLECTION_ACTION.remove,\n      item: item\n    });\n  };\n  var registerDrop = function registerDrop(item) {\n    dispatchDrops({\n      type: COLLECTION_ACTION.add,\n      item: item\n    });\n  };\n  var deregisterDrop = function deregisterDrop(item) {\n    dispatchDrops({\n      type: COLLECTION_ACTION.remove,\n      item: item\n    });\n  };\n  return React.createElement(DragContext.Provider, {\n    value: [drag, setDrag]\n  }, React.createElement(DropContext.Provider, {\n    value: [drop, setDrop]\n  }, React.createElement(DragsContext.Provider, {\n    value: [drags, registerDrag, deregisterDrag]\n  }, React.createElement(DropsContext.Provider, {\n    value: [drops, registerDrop, deregisterDrop]\n  }, props.children))));\n};\nDragAndDrop.displayName = 'KendoReactDragAndDrop';","map":null,"metadata":{},"sourceType":"module"}