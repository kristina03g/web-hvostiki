{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * @hidden\n */\nvar optionsReducer = function optionsReducer(currentState, action) {\n  if (action.chartCollectionIdxKey) {\n    return reducers.collectionConfigurationItem(currentState, action);\n  } else if (action.chartKey) {\n    return reducers.configurationItem(currentState, action);\n  } else {\n    return {};\n  }\n};\n/**\n * @hidden\n */\nvar themeReducer = function themeReducer(currentState, action) {\n  if (action.type) {\n    switch (action.type) {\n      case 'set':\n        return reducers.themeItem(currentState, action);\n      case 'push':\n        return Object.assign(currentState, action.payload);\n      default:\n        return currentState;\n    }\n  } else {\n    return {};\n  }\n};\n/**\n * @hidden\n */\nvar observersReducer = function observersReducer(currentState, action) {\n  if (action.type) {\n    switch (action.type) {\n      case 'add':\n        return __spreadArray(__spreadArray([], currentState, true), [action.payload], false);\n      case 'remove':\n        return currentState.filter(function (element) {\n          return element !== action.payload;\n        });\n      default:\n        return currentState;\n    }\n  } else {\n    return [];\n  }\n};\n/**\n * @hidden\n */\nvar reducers = {\n  configurationItem: function configurationItem(currentState, action) {\n    var _a;\n    return Object.assign(currentState, (_a = {}, _a[action.chartKey] = action.payload, _a));\n  },\n  collectionConfigurationItem: function collectionConfigurationItem(currentState, action) {\n    var _a;\n    var inCollection = false;\n    var _b = action.chartCollectionIdxKey.split('_'),\n      collectionName = _b[0],\n      collectionIdx = _b[1];\n    var collection = currentState[collectionName].map(function (item, index) {\n      if (parseInt(collectionIdx, 10) === index) {\n        inCollection = true;\n        return action.payload;\n      }\n      return item;\n    });\n    if (inCollection === false) {\n      collection.splice(parseInt(collectionIdx, 10), 0, action.payload);\n    }\n    return Object.assign(currentState, (_a = {}, _a[collectionName] = collection, _a));\n  },\n  themeItem: function themeItem(currentState, action) {\n    var store = {};\n    var nextStore = Object.assign(store, currentState);\n    var _a = action.payload,\n      field = _a.field,\n      value = _a.value;\n    var parts = field.split('.');\n    var key = parts.shift();\n    while (parts.length > 0) {\n      store = store[key] = store[key] || {};\n      key = parts.shift();\n    }\n    store[key] = value;\n    return nextStore;\n  }\n};\nexport { optionsReducer, themeReducer, observersReducer };","map":null,"metadata":{},"sourceType":"module"}