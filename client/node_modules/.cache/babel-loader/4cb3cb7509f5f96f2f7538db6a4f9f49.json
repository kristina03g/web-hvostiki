{"ast":null,"code":"import { deepExtend, addClass, keys, setDefaultOptions } from '../common';\nimport { Observable } from './scroller/observable';\nimport { proxy, on, off, setDefaultEvents, convertToHtml } from './utils';\nvar PAN = \"pan\";\nvar directionsMap = {\n  up: {\n    className: \"k-navigator-n\",\n    iconClass: \"k-i-caret-alt-up\"\n  },\n  down: {\n    className: \"k-navigator-s\",\n    iconClass: \"k-i-caret-alt-down\"\n  },\n  right: {\n    className: \"k-navigator-e\",\n    iconClass: \"k-i-caret-alt-right\"\n  },\n  left: {\n    className: \"k-navigator-w\",\n    iconClass: \"k-i-caret-alt-left\"\n  }\n};\nfunction createButton(direction) {\n  var html = '<button class=\"k-button k-button-square k-rounded-full k-button-flat k-button-flat-base k-icon-button ' + directionsMap[direction].className + '\" aria-label=\"move ' + direction + '\">' + '<span class=\"k-icon ' + directionsMap[direction].iconClass + '\" />' + '</button>';\n  return convertToHtml(html);\n}\nexport var Navigator = function (Observable) {\n  function Navigator(element, options) {\n    Observable.call(this);\n    this.element = element;\n    this._initOptions(options);\n    var navigateUpButton = createButton(\"up\");\n    var navigateRightlButton = createButton(\"right\");\n    var navigateDownButton = createButton(\"down\");\n    var navigateLeftButton = createButton(\"left\");\n    this.element.appendChild(navigateUpButton);\n    this.element.appendChild(navigateRightlButton);\n    this.element.appendChild(navigateDownButton);\n    this.element.appendChild(navigateLeftButton);\n    addClass(this.element, 'k-widget k-navigator');\n    on(this.element, \"click\", \".k-button\", proxy(this._click, this));\n    var parentElement = this.element.parentNode.closest(\"[data-role]\");\n    this._keyroot = parentElement ? parentElement : this.element;\n    this._tabindex(this._keyroot);\n    this._keydownHandler = proxy(this._keydown, this);\n    on(this._keyroot, \"keydown\", this._keydownHandler);\n  }\n  if (Observable) Navigator.__proto__ = Observable;\n  Navigator.prototype = Object.create(Observable && Observable.prototype);\n  Navigator.prototype.constructor = Navigator;\n  Navigator.prototype.destroy = function destroy() {\n    this.dispose();\n  };\n\n  // originates from the kendo.jquery version\n  Navigator.prototype.dispose = function dispose() {\n    off(this._keyroot, \"keydown\", this._keydownHandler);\n  };\n  Navigator.prototype._tabindex = function _tabindex(target) {\n    var targetElement = target || this.wrapper || this.element;\n    var element = this.element,\n      TABINDEX = \"tabindex\",\n      tabindex = targetElement.getAttribute(TABINDEX) || element.getAttribute(TABINDEX);\n    element.removeAttribute(TABINDEX);\n    targetElement.setAttribute(TABINDEX, !isNaN(tabindex) ? tabindex : 0);\n  };\n  Navigator.prototype._initOptions = function _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  };\n  Navigator.prototype._pan = function _pan(x, y) {\n    var panStep = this.options.panStep;\n    this.trigger(PAN, {\n      x: x * panStep,\n      y: y * panStep\n    });\n  };\n  Navigator.prototype._click = function _click(e) {\n    var x = 0;\n    var y = 0;\n    var button = e.currentTarget;\n    if (button.matches('.k-navigator-n')) {\n      y = 1;\n    } else if (button.matches('.k-navigator-s')) {\n      y = -1;\n    } else if (button.matches('.k-navigator-e')) {\n      x = 1;\n    } else if (button.matches('.k-navigator-w')) {\n      x = -1;\n    }\n    this._pan(x, y);\n    e.preventDefault();\n  };\n\n  /* eslint-disable indent */\n  Navigator.prototype._keydown = function _keydown(e) {\n    switch (e.which) {\n      case keys.UP:\n        this._pan(0, 1);\n        e.preventDefault();\n        break;\n      case keys.DOWN:\n        this._pan(0, -1);\n        e.preventDefault();\n        break;\n      case keys.RIGHT:\n        this._pan(1, 0);\n        e.preventDefault();\n        break;\n      case keys.LEFT:\n        this._pan(-1, 0);\n        e.preventDefault();\n        break;\n      default:\n        break;\n    }\n  };\n  return Navigator;\n}(Observable);\nsetDefaultOptions(Navigator, {\n  name: 'Navigator',\n  panStep: 1\n});\nsetDefaultEvents(Navigator, [PAN]);","map":null,"metadata":{},"sourceType":"module"}