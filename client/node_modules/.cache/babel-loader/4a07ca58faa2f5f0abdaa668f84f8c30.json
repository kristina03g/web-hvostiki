{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString, splitInto } from '../../utils';\nexport var AlphaNumericQRDataMode = function (QRDataMode) {\n  function AlphaNumericQRDataMode() {\n    QRDataMode.apply(this, arguments);\n  }\n  if (QRDataMode) AlphaNumericQRDataMode.__proto__ = QRDataMode;\n  AlphaNumericQRDataMode.prototype = Object.create(QRDataMode && QRDataMode.prototype);\n  AlphaNumericQRDataMode.prototype.constructor = AlphaNumericQRDataMode;\n  AlphaNumericQRDataMode.prototype.initProperties = function initProperties() {\n    QRDataMode.prototype.initProperties.call(this);\n    extend(this, {\n      characters: {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n        \"G\": 16,\n        \"H\": 17,\n        \"I\": 18,\n        \"J\": 19,\n        \"K\": 20,\n        \"L\": 21,\n        \"M\": 22,\n        \"N\": 23,\n        \"O\": 24,\n        \"P\": 25,\n        \"Q\": 26,\n        \"R\": 27,\n        \"S\": 28,\n        \"T\": 29,\n        \"U\": 30,\n        \"V\": 31,\n        \"W\": 32,\n        \"X\": 33,\n        \"Y\": 34,\n        \"Z\": 35,\n        \" \": 36,\n        \"$\": 37,\n        \"%\": 38,\n        \"*\": 39,\n        \"+\": 40,\n        \"-\": 41,\n        \".\": 42,\n        \"/\": 43,\n        \":\": 44\n      },\n      bitsInCharacterCount: [9, 11, 13],\n      modeIndicator: \"0010\"\n    });\n  };\n  AlphaNumericQRDataMode.prototype.getValue = function getValue(character) {\n    return this.characters[character];\n  };\n  AlphaNumericQRDataMode.prototype.encode = function encode(str, version) {\n    var this$1 = this;\n    var parts = splitInto(str, 2),\n      result = this.getModeCountString(str.length, version),\n      value;\n    var i;\n    for (i = 0; i < parts.length - 1; i++) {\n      value = 45 * this$1.getValue(parts[i].charAt(0)) + this$1.getValue(parts[i].charAt(1));\n      result += toBitsString(value, 11);\n    }\n    value = parts[i].length === 2 ? 45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1)) : this.getValue(parts[i].charAt(0));\n    return result + toBitsString(value, 1 + 5 * parts[i].length);\n  };\n  AlphaNumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength(inputLength, version) {\n    return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n  };\n  return AlphaNumericQRDataMode;\n}(QRDataMode);","map":null,"metadata":{},"sourceType":"module"}